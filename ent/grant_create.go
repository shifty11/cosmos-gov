// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-gov/ent/grant"
	"github.com/shifty11/cosmos-gov/ent/wallet"
)

// GrantCreate is the builder for creating a Grant entity.
type GrantCreate struct {
	config
	mutation *GrantMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (gc *GrantCreate) SetCreateTime(t time.Time) *GrantCreate {
	gc.mutation.SetCreateTime(t)
	return gc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (gc *GrantCreate) SetNillableCreateTime(t *time.Time) *GrantCreate {
	if t != nil {
		gc.SetCreateTime(*t)
	}
	return gc
}

// SetUpdateTime sets the "update_time" field.
func (gc *GrantCreate) SetUpdateTime(t time.Time) *GrantCreate {
	gc.mutation.SetUpdateTime(t)
	return gc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (gc *GrantCreate) SetNillableUpdateTime(t *time.Time) *GrantCreate {
	if t != nil {
		gc.SetUpdateTime(*t)
	}
	return gc
}

// SetGrantee sets the "grantee" field.
func (gc *GrantCreate) SetGrantee(s string) *GrantCreate {
	gc.mutation.SetGrantee(s)
	return gc
}

// SetType sets the "type" field.
func (gc *GrantCreate) SetType(s string) *GrantCreate {
	gc.mutation.SetType(s)
	return gc
}

// SetExpiresAt sets the "expires_at" field.
func (gc *GrantCreate) SetExpiresAt(t time.Time) *GrantCreate {
	gc.mutation.SetExpiresAt(t)
	return gc
}

// SetGranterID sets the "granter" edge to the Wallet entity by ID.
func (gc *GrantCreate) SetGranterID(id int) *GrantCreate {
	gc.mutation.SetGranterID(id)
	return gc
}

// SetNillableGranterID sets the "granter" edge to the Wallet entity by ID if the given value is not nil.
func (gc *GrantCreate) SetNillableGranterID(id *int) *GrantCreate {
	if id != nil {
		gc = gc.SetGranterID(*id)
	}
	return gc
}

// SetGranter sets the "granter" edge to the Wallet entity.
func (gc *GrantCreate) SetGranter(w *Wallet) *GrantCreate {
	return gc.SetGranterID(w.ID)
}

// Mutation returns the GrantMutation object of the builder.
func (gc *GrantCreate) Mutation() *GrantMutation {
	return gc.mutation
}

// Save creates the Grant in the database.
func (gc *GrantCreate) Save(ctx context.Context) (*Grant, error) {
	var (
		err  error
		node *Grant
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GrantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GrantCreate) SaveX(ctx context.Context) *Grant {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GrantCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GrantCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GrantCreate) defaults() {
	if _, ok := gc.mutation.CreateTime(); !ok {
		v := grant.DefaultCreateTime()
		gc.mutation.SetCreateTime(v)
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		v := grant.DefaultUpdateTime()
		gc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GrantCreate) check() error {
	if _, ok := gc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Grant.create_time"`)}
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Grant.update_time"`)}
	}
	if _, ok := gc.mutation.Grantee(); !ok {
		return &ValidationError{Name: "grantee", err: errors.New(`ent: missing required field "Grant.grantee"`)}
	}
	if _, ok := gc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Grant.type"`)}
	}
	if _, ok := gc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Grant.expires_at"`)}
	}
	return nil
}

func (gc *GrantCreate) sqlSave(ctx context.Context) (*Grant, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gc *GrantCreate) createSpec() (*Grant, *sqlgraph.CreateSpec) {
	var (
		_node = &Grant{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: grant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grant.FieldID,
			},
		}
	)
	if value, ok := gc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := gc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := gc.mutation.Grantee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldGrantee,
		})
		_node.Grantee = value
	}
	if value, ok := gc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldType,
		})
		_node.Type = value
	}
	if value, ok := gc.mutation.ExpiresAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldExpiresAt,
		})
		_node.ExpiresAt = value
	}
	if nodes := gc.mutation.GranterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.GranterTable,
			Columns: []string{grant.GranterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.wallet_grants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GrantCreateBulk is the builder for creating many Grant entities in bulk.
type GrantCreateBulk struct {
	config
	builders []*GrantCreate
}

// Save creates the Grant entities in the database.
func (gcb *GrantCreateBulk) Save(ctx context.Context) ([]*Grant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Grant, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GrantCreateBulk) SaveX(ctx context.Context) []*Grant {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GrantCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GrantCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
