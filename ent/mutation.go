// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/discordchannel"
	"github.com/shifty11/cosmos-gov/ent/grant"
	"github.com/shifty11/cosmos-gov/ent/lenschaininfo"
	"github.com/shifty11/cosmos-gov/ent/predicate"
	"github.com/shifty11/cosmos-gov/ent/proposal"
	"github.com/shifty11/cosmos-gov/ent/rpcendpoint"
	"github.com/shifty11/cosmos-gov/ent/telegramchat"
	"github.com/shifty11/cosmos-gov/ent/user"
	"github.com/shifty11/cosmos-gov/ent/wallet"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChain          = "Chain"
	TypeDiscordChannel = "DiscordChannel"
	TypeGrant          = "Grant"
	TypeLensChainInfo  = "LensChainInfo"
	TypeProposal       = "Proposal"
	TypeRpcEndpoint    = "RpcEndpoint"
	TypeTelegramChat   = "TelegramChat"
	TypeUser           = "User"
	TypeWallet         = "Wallet"
)

// ChainMutation represents an operation that mutates the Chain nodes in the graph.
type ChainMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	chain_id                *string
	account_prefix          *string
	name                    *string
	display_name            *string
	is_enabled              *bool
	clearedFields           map[string]struct{}
	proposals               map[int]struct{}
	removedproposals        map[int]struct{}
	clearedproposals        bool
	telegram_chats          map[int]struct{}
	removedtelegram_chats   map[int]struct{}
	clearedtelegram_chats   bool
	discord_channels        map[int]struct{}
	removeddiscord_channels map[int]struct{}
	cleareddiscord_channels bool
	rpc_endpoints           map[int]struct{}
	removedrpc_endpoints    map[int]struct{}
	clearedrpc_endpoints    bool
	wallets                 map[int]struct{}
	removedwallets          map[int]struct{}
	clearedwallets          bool
	done                    bool
	oldValue                func(context.Context) (*Chain, error)
	predicates              []predicate.Chain
}

var _ ent.Mutation = (*ChainMutation)(nil)

// chainOption allows management of the mutation configuration using functional options.
type chainOption func(*ChainMutation)

// newChainMutation creates new mutation for the Chain entity.
func newChainMutation(c config, op Op, opts ...chainOption) *ChainMutation {
	m := &ChainMutation{
		config:        c,
		op:            op,
		typ:           TypeChain,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChainID sets the ID field of the mutation.
func withChainID(id int) chainOption {
	return func(m *ChainMutation) {
		var (
			err   error
			once  sync.Once
			value *Chain
		)
		m.oldValue = func(ctx context.Context) (*Chain, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chain.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChain sets the old Chain of the mutation.
func withChain(node *Chain) chainOption {
	return func(m *ChainMutation) {
		m.oldValue = func(context.Context) (*Chain, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChainMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChainMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChainMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChainMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chain.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ChainMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ChainMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ChainMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ChainMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ChainMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ChainMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChainID sets the "chain_id" field.
func (m *ChainMutation) SetChainID(s string) {
	m.chain_id = &s
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *ChainMutation) ChainID() (r string, exists bool) {
	v := m.chain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldChainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *ChainMutation) ResetChainID() {
	m.chain_id = nil
}

// SetAccountPrefix sets the "account_prefix" field.
func (m *ChainMutation) SetAccountPrefix(s string) {
	m.account_prefix = &s
}

// AccountPrefix returns the value of the "account_prefix" field in the mutation.
func (m *ChainMutation) AccountPrefix() (r string, exists bool) {
	v := m.account_prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountPrefix returns the old "account_prefix" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldAccountPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountPrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountPrefix: %w", err)
	}
	return oldValue.AccountPrefix, nil
}

// ResetAccountPrefix resets all changes to the "account_prefix" field.
func (m *ChainMutation) ResetAccountPrefix() {
	m.account_prefix = nil
}

// SetName sets the "name" field.
func (m *ChainMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChainMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChainMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *ChainMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ChainMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ChainMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *ChainMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *ChainMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *ChainMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by ids.
func (m *ChainMutation) AddProposalIDs(ids ...int) {
	if m.proposals == nil {
		m.proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.proposals[ids[i]] = struct{}{}
	}
}

// ClearProposals clears the "proposals" edge to the Proposal entity.
func (m *ChainMutation) ClearProposals() {
	m.clearedproposals = true
}

// ProposalsCleared reports if the "proposals" edge to the Proposal entity was cleared.
func (m *ChainMutation) ProposalsCleared() bool {
	return m.clearedproposals
}

// RemoveProposalIDs removes the "proposals" edge to the Proposal entity by IDs.
func (m *ChainMutation) RemoveProposalIDs(ids ...int) {
	if m.removedproposals == nil {
		m.removedproposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proposals, ids[i])
		m.removedproposals[ids[i]] = struct{}{}
	}
}

// RemovedProposals returns the removed IDs of the "proposals" edge to the Proposal entity.
func (m *ChainMutation) RemovedProposalsIDs() (ids []int) {
	for id := range m.removedproposals {
		ids = append(ids, id)
	}
	return
}

// ProposalsIDs returns the "proposals" edge IDs in the mutation.
func (m *ChainMutation) ProposalsIDs() (ids []int) {
	for id := range m.proposals {
		ids = append(ids, id)
	}
	return
}

// ResetProposals resets all changes to the "proposals" edge.
func (m *ChainMutation) ResetProposals() {
	m.proposals = nil
	m.clearedproposals = false
	m.removedproposals = nil
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by ids.
func (m *ChainMutation) AddTelegramChatIDs(ids ...int) {
	if m.telegram_chats == nil {
		m.telegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		m.telegram_chats[ids[i]] = struct{}{}
	}
}

// ClearTelegramChats clears the "telegram_chats" edge to the TelegramChat entity.
func (m *ChainMutation) ClearTelegramChats() {
	m.clearedtelegram_chats = true
}

// TelegramChatsCleared reports if the "telegram_chats" edge to the TelegramChat entity was cleared.
func (m *ChainMutation) TelegramChatsCleared() bool {
	return m.clearedtelegram_chats
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to the TelegramChat entity by IDs.
func (m *ChainMutation) RemoveTelegramChatIDs(ids ...int) {
	if m.removedtelegram_chats == nil {
		m.removedtelegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telegram_chats, ids[i])
		m.removedtelegram_chats[ids[i]] = struct{}{}
	}
}

// RemovedTelegramChats returns the removed IDs of the "telegram_chats" edge to the TelegramChat entity.
func (m *ChainMutation) RemovedTelegramChatsIDs() (ids []int) {
	for id := range m.removedtelegram_chats {
		ids = append(ids, id)
	}
	return
}

// TelegramChatsIDs returns the "telegram_chats" edge IDs in the mutation.
func (m *ChainMutation) TelegramChatsIDs() (ids []int) {
	for id := range m.telegram_chats {
		ids = append(ids, id)
	}
	return
}

// ResetTelegramChats resets all changes to the "telegram_chats" edge.
func (m *ChainMutation) ResetTelegramChats() {
	m.telegram_chats = nil
	m.clearedtelegram_chats = false
	m.removedtelegram_chats = nil
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by ids.
func (m *ChainMutation) AddDiscordChannelIDs(ids ...int) {
	if m.discord_channels == nil {
		m.discord_channels = make(map[int]struct{})
	}
	for i := range ids {
		m.discord_channels[ids[i]] = struct{}{}
	}
}

// ClearDiscordChannels clears the "discord_channels" edge to the DiscordChannel entity.
func (m *ChainMutation) ClearDiscordChannels() {
	m.cleareddiscord_channels = true
}

// DiscordChannelsCleared reports if the "discord_channels" edge to the DiscordChannel entity was cleared.
func (m *ChainMutation) DiscordChannelsCleared() bool {
	return m.cleareddiscord_channels
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to the DiscordChannel entity by IDs.
func (m *ChainMutation) RemoveDiscordChannelIDs(ids ...int) {
	if m.removeddiscord_channels == nil {
		m.removeddiscord_channels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.discord_channels, ids[i])
		m.removeddiscord_channels[ids[i]] = struct{}{}
	}
}

// RemovedDiscordChannels returns the removed IDs of the "discord_channels" edge to the DiscordChannel entity.
func (m *ChainMutation) RemovedDiscordChannelsIDs() (ids []int) {
	for id := range m.removeddiscord_channels {
		ids = append(ids, id)
	}
	return
}

// DiscordChannelsIDs returns the "discord_channels" edge IDs in the mutation.
func (m *ChainMutation) DiscordChannelsIDs() (ids []int) {
	for id := range m.discord_channels {
		ids = append(ids, id)
	}
	return
}

// ResetDiscordChannels resets all changes to the "discord_channels" edge.
func (m *ChainMutation) ResetDiscordChannels() {
	m.discord_channels = nil
	m.cleareddiscord_channels = false
	m.removeddiscord_channels = nil
}

// AddRPCEndpointIDs adds the "rpc_endpoints" edge to the RpcEndpoint entity by ids.
func (m *ChainMutation) AddRPCEndpointIDs(ids ...int) {
	if m.rpc_endpoints == nil {
		m.rpc_endpoints = make(map[int]struct{})
	}
	for i := range ids {
		m.rpc_endpoints[ids[i]] = struct{}{}
	}
}

// ClearRPCEndpoints clears the "rpc_endpoints" edge to the RpcEndpoint entity.
func (m *ChainMutation) ClearRPCEndpoints() {
	m.clearedrpc_endpoints = true
}

// RPCEndpointsCleared reports if the "rpc_endpoints" edge to the RpcEndpoint entity was cleared.
func (m *ChainMutation) RPCEndpointsCleared() bool {
	return m.clearedrpc_endpoints
}

// RemoveRPCEndpointIDs removes the "rpc_endpoints" edge to the RpcEndpoint entity by IDs.
func (m *ChainMutation) RemoveRPCEndpointIDs(ids ...int) {
	if m.removedrpc_endpoints == nil {
		m.removedrpc_endpoints = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rpc_endpoints, ids[i])
		m.removedrpc_endpoints[ids[i]] = struct{}{}
	}
}

// RemovedRPCEndpoints returns the removed IDs of the "rpc_endpoints" edge to the RpcEndpoint entity.
func (m *ChainMutation) RemovedRPCEndpointsIDs() (ids []int) {
	for id := range m.removedrpc_endpoints {
		ids = append(ids, id)
	}
	return
}

// RPCEndpointsIDs returns the "rpc_endpoints" edge IDs in the mutation.
func (m *ChainMutation) RPCEndpointsIDs() (ids []int) {
	for id := range m.rpc_endpoints {
		ids = append(ids, id)
	}
	return
}

// ResetRPCEndpoints resets all changes to the "rpc_endpoints" edge.
func (m *ChainMutation) ResetRPCEndpoints() {
	m.rpc_endpoints = nil
	m.clearedrpc_endpoints = false
	m.removedrpc_endpoints = nil
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by ids.
func (m *ChainMutation) AddWalletIDs(ids ...int) {
	if m.wallets == nil {
		m.wallets = make(map[int]struct{})
	}
	for i := range ids {
		m.wallets[ids[i]] = struct{}{}
	}
}

// ClearWallets clears the "wallets" edge to the Wallet entity.
func (m *ChainMutation) ClearWallets() {
	m.clearedwallets = true
}

// WalletsCleared reports if the "wallets" edge to the Wallet entity was cleared.
func (m *ChainMutation) WalletsCleared() bool {
	return m.clearedwallets
}

// RemoveWalletIDs removes the "wallets" edge to the Wallet entity by IDs.
func (m *ChainMutation) RemoveWalletIDs(ids ...int) {
	if m.removedwallets == nil {
		m.removedwallets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.wallets, ids[i])
		m.removedwallets[ids[i]] = struct{}{}
	}
}

// RemovedWallets returns the removed IDs of the "wallets" edge to the Wallet entity.
func (m *ChainMutation) RemovedWalletsIDs() (ids []int) {
	for id := range m.removedwallets {
		ids = append(ids, id)
	}
	return
}

// WalletsIDs returns the "wallets" edge IDs in the mutation.
func (m *ChainMutation) WalletsIDs() (ids []int) {
	for id := range m.wallets {
		ids = append(ids, id)
	}
	return
}

// ResetWallets resets all changes to the "wallets" edge.
func (m *ChainMutation) ResetWallets() {
	m.wallets = nil
	m.clearedwallets = false
	m.removedwallets = nil
}

// Where appends a list predicates to the ChainMutation builder.
func (m *ChainMutation) Where(ps ...predicate.Chain) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChainMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Chain).
func (m *ChainMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChainMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, chain.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, chain.FieldUpdateTime)
	}
	if m.chain_id != nil {
		fields = append(fields, chain.FieldChainID)
	}
	if m.account_prefix != nil {
		fields = append(fields, chain.FieldAccountPrefix)
	}
	if m.name != nil {
		fields = append(fields, chain.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, chain.FieldDisplayName)
	}
	if m.is_enabled != nil {
		fields = append(fields, chain.FieldIsEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChainMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chain.FieldCreateTime:
		return m.CreateTime()
	case chain.FieldUpdateTime:
		return m.UpdateTime()
	case chain.FieldChainID:
		return m.ChainID()
	case chain.FieldAccountPrefix:
		return m.AccountPrefix()
	case chain.FieldName:
		return m.Name()
	case chain.FieldDisplayName:
		return m.DisplayName()
	case chain.FieldIsEnabled:
		return m.IsEnabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChainMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chain.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case chain.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case chain.FieldChainID:
		return m.OldChainID(ctx)
	case chain.FieldAccountPrefix:
		return m.OldAccountPrefix(ctx)
	case chain.FieldName:
		return m.OldName(ctx)
	case chain.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case chain.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown Chain field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chain.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case chain.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case chain.FieldChainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case chain.FieldAccountPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountPrefix(v)
		return nil
	case chain.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case chain.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case chain.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown Chain field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChainMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChainMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chain numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChainMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChainMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChainMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chain nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChainMutation) ResetField(name string) error {
	switch name {
	case chain.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case chain.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case chain.FieldChainID:
		m.ResetChainID()
		return nil
	case chain.FieldAccountPrefix:
		m.ResetAccountPrefix()
		return nil
	case chain.FieldName:
		m.ResetName()
		return nil
	case chain.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case chain.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	}
	return fmt.Errorf("unknown Chain field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChainMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.proposals != nil {
		edges = append(edges, chain.EdgeProposals)
	}
	if m.telegram_chats != nil {
		edges = append(edges, chain.EdgeTelegramChats)
	}
	if m.discord_channels != nil {
		edges = append(edges, chain.EdgeDiscordChannels)
	}
	if m.rpc_endpoints != nil {
		edges = append(edges, chain.EdgeRPCEndpoints)
	}
	if m.wallets != nil {
		edges = append(edges, chain.EdgeWallets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChainMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chain.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.proposals))
		for id := range m.proposals {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.telegram_chats))
		for id := range m.telegram_chats {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.discord_channels))
		for id := range m.discord_channels {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeRPCEndpoints:
		ids := make([]ent.Value, 0, len(m.rpc_endpoints))
		for id := range m.rpc_endpoints {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.wallets))
		for id := range m.wallets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChainMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedproposals != nil {
		edges = append(edges, chain.EdgeProposals)
	}
	if m.removedtelegram_chats != nil {
		edges = append(edges, chain.EdgeTelegramChats)
	}
	if m.removeddiscord_channels != nil {
		edges = append(edges, chain.EdgeDiscordChannels)
	}
	if m.removedrpc_endpoints != nil {
		edges = append(edges, chain.EdgeRPCEndpoints)
	}
	if m.removedwallets != nil {
		edges = append(edges, chain.EdgeWallets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChainMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chain.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.removedproposals))
		for id := range m.removedproposals {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.removedtelegram_chats))
		for id := range m.removedtelegram_chats {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.removeddiscord_channels))
		for id := range m.removeddiscord_channels {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeRPCEndpoints:
		ids := make([]ent.Value, 0, len(m.removedrpc_endpoints))
		for id := range m.removedrpc_endpoints {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.removedwallets))
		for id := range m.removedwallets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChainMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedproposals {
		edges = append(edges, chain.EdgeProposals)
	}
	if m.clearedtelegram_chats {
		edges = append(edges, chain.EdgeTelegramChats)
	}
	if m.cleareddiscord_channels {
		edges = append(edges, chain.EdgeDiscordChannels)
	}
	if m.clearedrpc_endpoints {
		edges = append(edges, chain.EdgeRPCEndpoints)
	}
	if m.clearedwallets {
		edges = append(edges, chain.EdgeWallets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChainMutation) EdgeCleared(name string) bool {
	switch name {
	case chain.EdgeProposals:
		return m.clearedproposals
	case chain.EdgeTelegramChats:
		return m.clearedtelegram_chats
	case chain.EdgeDiscordChannels:
		return m.cleareddiscord_channels
	case chain.EdgeRPCEndpoints:
		return m.clearedrpc_endpoints
	case chain.EdgeWallets:
		return m.clearedwallets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChainMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Chain unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChainMutation) ResetEdge(name string) error {
	switch name {
	case chain.EdgeProposals:
		m.ResetProposals()
		return nil
	case chain.EdgeTelegramChats:
		m.ResetTelegramChats()
		return nil
	case chain.EdgeDiscordChannels:
		m.ResetDiscordChannels()
		return nil
	case chain.EdgeRPCEndpoints:
		m.ResetRPCEndpoints()
		return nil
	case chain.EdgeWallets:
		m.ResetWallets()
		return nil
	}
	return fmt.Errorf("unknown Chain edge %s", name)
}

// DiscordChannelMutation represents an operation that mutates the DiscordChannel nodes in the graph.
type DiscordChannelMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	channel_id    *int64
	addchannel_id *int64
	name          *string
	is_group      *bool
	roles         *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	chains        map[int]struct{}
	removedchains map[int]struct{}
	clearedchains bool
	done          bool
	oldValue      func(context.Context) (*DiscordChannel, error)
	predicates    []predicate.DiscordChannel
}

var _ ent.Mutation = (*DiscordChannelMutation)(nil)

// discordchannelOption allows management of the mutation configuration using functional options.
type discordchannelOption func(*DiscordChannelMutation)

// newDiscordChannelMutation creates new mutation for the DiscordChannel entity.
func newDiscordChannelMutation(c config, op Op, opts ...discordchannelOption) *DiscordChannelMutation {
	m := &DiscordChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscordChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscordChannelID sets the ID field of the mutation.
func withDiscordChannelID(id int) discordchannelOption {
	return func(m *DiscordChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscordChannel
		)
		m.oldValue = func(ctx context.Context) (*DiscordChannel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscordChannel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscordChannel sets the old DiscordChannel of the mutation.
func withDiscordChannel(node *DiscordChannel) discordchannelOption {
	return func(m *DiscordChannelMutation) {
		m.oldValue = func(context.Context) (*DiscordChannel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscordChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscordChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscordChannelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscordChannelMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscordChannel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DiscordChannelMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DiscordChannelMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DiscordChannelMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DiscordChannelMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DiscordChannelMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DiscordChannelMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChannelID sets the "channel_id" field.
func (m *DiscordChannelMutation) SetChannelID(i int64) {
	m.channel_id = &i
	m.addchannel_id = nil
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *DiscordChannelMutation) ChannelID() (r int64, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldChannelID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// AddChannelID adds i to the "channel_id" field.
func (m *DiscordChannelMutation) AddChannelID(i int64) {
	if m.addchannel_id != nil {
		*m.addchannel_id += i
	} else {
		m.addchannel_id = &i
	}
}

// AddedChannelID returns the value that was added to the "channel_id" field in this mutation.
func (m *DiscordChannelMutation) AddedChannelID() (r int64, exists bool) {
	v := m.addchannel_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *DiscordChannelMutation) ResetChannelID() {
	m.channel_id = nil
	m.addchannel_id = nil
}

// SetName sets the "name" field.
func (m *DiscordChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiscordChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiscordChannelMutation) ResetName() {
	m.name = nil
}

// SetIsGroup sets the "is_group" field.
func (m *DiscordChannelMutation) SetIsGroup(b bool) {
	m.is_group = &b
}

// IsGroup returns the value of the "is_group" field in the mutation.
func (m *DiscordChannelMutation) IsGroup() (r bool, exists bool) {
	v := m.is_group
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGroup returns the old "is_group" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldIsGroup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGroup: %w", err)
	}
	return oldValue.IsGroup, nil
}

// ResetIsGroup resets all changes to the "is_group" field.
func (m *DiscordChannelMutation) ResetIsGroup() {
	m.is_group = nil
}

// SetRoles sets the "roles" field.
func (m *DiscordChannelMutation) SetRoles(s string) {
	m.roles = &s
}

// Roles returns the value of the "roles" field in the mutation.
func (m *DiscordChannelMutation) Roles() (r string, exists bool) {
	v := m.roles
	if v == nil {
		return
	}
	return *v, true
}

// OldRoles returns the old "roles" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldRoles(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoles: %w", err)
	}
	return oldValue.Roles, nil
}

// ResetRoles resets all changes to the "roles" field.
func (m *DiscordChannelMutation) ResetRoles() {
	m.roles = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *DiscordChannelMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *DiscordChannelMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *DiscordChannelMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *DiscordChannelMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DiscordChannelMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DiscordChannelMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddChainIDs adds the "chains" edge to the Chain entity by ids.
func (m *DiscordChannelMutation) AddChainIDs(ids ...int) {
	if m.chains == nil {
		m.chains = make(map[int]struct{})
	}
	for i := range ids {
		m.chains[ids[i]] = struct{}{}
	}
}

// ClearChains clears the "chains" edge to the Chain entity.
func (m *DiscordChannelMutation) ClearChains() {
	m.clearedchains = true
}

// ChainsCleared reports if the "chains" edge to the Chain entity was cleared.
func (m *DiscordChannelMutation) ChainsCleared() bool {
	return m.clearedchains
}

// RemoveChainIDs removes the "chains" edge to the Chain entity by IDs.
func (m *DiscordChannelMutation) RemoveChainIDs(ids ...int) {
	if m.removedchains == nil {
		m.removedchains = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chains, ids[i])
		m.removedchains[ids[i]] = struct{}{}
	}
}

// RemovedChains returns the removed IDs of the "chains" edge to the Chain entity.
func (m *DiscordChannelMutation) RemovedChainsIDs() (ids []int) {
	for id := range m.removedchains {
		ids = append(ids, id)
	}
	return
}

// ChainsIDs returns the "chains" edge IDs in the mutation.
func (m *DiscordChannelMutation) ChainsIDs() (ids []int) {
	for id := range m.chains {
		ids = append(ids, id)
	}
	return
}

// ResetChains resets all changes to the "chains" edge.
func (m *DiscordChannelMutation) ResetChains() {
	m.chains = nil
	m.clearedchains = false
	m.removedchains = nil
}

// Where appends a list predicates to the DiscordChannelMutation builder.
func (m *DiscordChannelMutation) Where(ps ...predicate.DiscordChannel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DiscordChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DiscordChannel).
func (m *DiscordChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscordChannelMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, discordchannel.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, discordchannel.FieldUpdateTime)
	}
	if m.channel_id != nil {
		fields = append(fields, discordchannel.FieldChannelID)
	}
	if m.name != nil {
		fields = append(fields, discordchannel.FieldName)
	}
	if m.is_group != nil {
		fields = append(fields, discordchannel.FieldIsGroup)
	}
	if m.roles != nil {
		fields = append(fields, discordchannel.FieldRoles)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscordChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discordchannel.FieldCreateTime:
		return m.CreateTime()
	case discordchannel.FieldUpdateTime:
		return m.UpdateTime()
	case discordchannel.FieldChannelID:
		return m.ChannelID()
	case discordchannel.FieldName:
		return m.Name()
	case discordchannel.FieldIsGroup:
		return m.IsGroup()
	case discordchannel.FieldRoles:
		return m.Roles()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscordChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discordchannel.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case discordchannel.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case discordchannel.FieldChannelID:
		return m.OldChannelID(ctx)
	case discordchannel.FieldName:
		return m.OldName(ctx)
	case discordchannel.FieldIsGroup:
		return m.OldIsGroup(ctx)
	case discordchannel.FieldRoles:
		return m.OldRoles(ctx)
	}
	return nil, fmt.Errorf("unknown DiscordChannel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discordchannel.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case discordchannel.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case discordchannel.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case discordchannel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case discordchannel.FieldIsGroup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGroup(v)
		return nil
	case discordchannel.FieldRoles:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoles(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscordChannelMutation) AddedFields() []string {
	var fields []string
	if m.addchannel_id != nil {
		fields = append(fields, discordchannel.FieldChannelID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscordChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case discordchannel.FieldChannelID:
		return m.AddedChannelID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case discordchannel.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChannelID(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscordChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscordChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscordChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DiscordChannel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscordChannelMutation) ResetField(name string) error {
	switch name {
	case discordchannel.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case discordchannel.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case discordchannel.FieldChannelID:
		m.ResetChannelID()
		return nil
	case discordchannel.FieldName:
		m.ResetName()
		return nil
	case discordchannel.FieldIsGroup:
		m.ResetIsGroup()
		return nil
	case discordchannel.FieldRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscordChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, discordchannel.EdgeUser)
	}
	if m.chains != nil {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscordChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discordchannel.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case discordchannel.EdgeChains:
		ids := make([]ent.Value, 0, len(m.chains))
		for id := range m.chains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscordChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchains != nil {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscordChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case discordchannel.EdgeChains:
		ids := make([]ent.Value, 0, len(m.removedchains))
		for id := range m.removedchains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscordChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, discordchannel.EdgeUser)
	}
	if m.clearedchains {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscordChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case discordchannel.EdgeUser:
		return m.cleareduser
	case discordchannel.EdgeChains:
		return m.clearedchains
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscordChannelMutation) ClearEdge(name string) error {
	switch name {
	case discordchannel.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscordChannelMutation) ResetEdge(name string) error {
	switch name {
	case discordchannel.EdgeUser:
		m.ResetUser()
		return nil
	case discordchannel.EdgeChains:
		m.ResetChains()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel edge %s", name)
}

// GrantMutation represents an operation that mutates the Grant nodes in the graph.
type GrantMutation struct {
	config
	op             Op
	typ            string
	id             *int
	create_time    *time.Time
	update_time    *time.Time
	grantee        *string
	_type          *string
	expires_at     *time.Time
	clearedFields  map[string]struct{}
	granter        *int
	clearedgranter bool
	done           bool
	oldValue       func(context.Context) (*Grant, error)
	predicates     []predicate.Grant
}

var _ ent.Mutation = (*GrantMutation)(nil)

// grantOption allows management of the mutation configuration using functional options.
type grantOption func(*GrantMutation)

// newGrantMutation creates new mutation for the Grant entity.
func newGrantMutation(c config, op Op, opts ...grantOption) *GrantMutation {
	m := &GrantMutation{
		config:        c,
		op:            op,
		typ:           TypeGrant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGrantID sets the ID field of the mutation.
func withGrantID(id int) grantOption {
	return func(m *GrantMutation) {
		var (
			err   error
			once  sync.Once
			value *Grant
		)
		m.oldValue = func(ctx context.Context) (*Grant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Grant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGrant sets the old Grant of the mutation.
func withGrant(node *Grant) grantOption {
	return func(m *GrantMutation) {
		m.oldValue = func(context.Context) (*Grant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GrantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GrantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GrantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GrantMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Grant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GrantMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GrantMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GrantMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GrantMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GrantMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GrantMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetGrantee sets the "grantee" field.
func (m *GrantMutation) SetGrantee(s string) {
	m.grantee = &s
}

// Grantee returns the value of the "grantee" field in the mutation.
func (m *GrantMutation) Grantee() (r string, exists bool) {
	v := m.grantee
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantee returns the old "grantee" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldGrantee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantee: %w", err)
	}
	return oldValue.Grantee, nil
}

// ResetGrantee resets all changes to the "grantee" field.
func (m *GrantMutation) ResetGrantee() {
	m.grantee = nil
}

// SetType sets the "type" field.
func (m *GrantMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *GrantMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *GrantMutation) ResetType() {
	m._type = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *GrantMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *GrantMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *GrantMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetGranterID sets the "granter" edge to the Wallet entity by id.
func (m *GrantMutation) SetGranterID(id int) {
	m.granter = &id
}

// ClearGranter clears the "granter" edge to the Wallet entity.
func (m *GrantMutation) ClearGranter() {
	m.clearedgranter = true
}

// GranterCleared reports if the "granter" edge to the Wallet entity was cleared.
func (m *GrantMutation) GranterCleared() bool {
	return m.clearedgranter
}

// GranterID returns the "granter" edge ID in the mutation.
func (m *GrantMutation) GranterID() (id int, exists bool) {
	if m.granter != nil {
		return *m.granter, true
	}
	return
}

// GranterIDs returns the "granter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GranterID instead. It exists only for internal usage by the builders.
func (m *GrantMutation) GranterIDs() (ids []int) {
	if id := m.granter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGranter resets all changes to the "granter" edge.
func (m *GrantMutation) ResetGranter() {
	m.granter = nil
	m.clearedgranter = false
}

// Where appends a list predicates to the GrantMutation builder.
func (m *GrantMutation) Where(ps ...predicate.Grant) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GrantMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Grant).
func (m *GrantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GrantMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, grant.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, grant.FieldUpdateTime)
	}
	if m.grantee != nil {
		fields = append(fields, grant.FieldGrantee)
	}
	if m._type != nil {
		fields = append(fields, grant.FieldType)
	}
	if m.expires_at != nil {
		fields = append(fields, grant.FieldExpiresAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GrantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grant.FieldCreateTime:
		return m.CreateTime()
	case grant.FieldUpdateTime:
		return m.UpdateTime()
	case grant.FieldGrantee:
		return m.Grantee()
	case grant.FieldType:
		return m.GetType()
	case grant.FieldExpiresAt:
		return m.ExpiresAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GrantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grant.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case grant.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case grant.FieldGrantee:
		return m.OldGrantee(ctx)
	case grant.FieldType:
		return m.OldType(ctx)
	case grant.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	}
	return nil, fmt.Errorf("unknown Grant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grant.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case grant.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case grant.FieldGrantee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantee(v)
		return nil
	case grant.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case grant.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	}
	return fmt.Errorf("unknown Grant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GrantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GrantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Grant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GrantMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GrantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GrantMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Grant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GrantMutation) ResetField(name string) error {
	switch name {
	case grant.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case grant.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case grant.FieldGrantee:
		m.ResetGrantee()
		return nil
	case grant.FieldType:
		m.ResetType()
		return nil
	case grant.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	}
	return fmt.Errorf("unknown Grant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GrantMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.granter != nil {
		edges = append(edges, grant.EdgeGranter)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GrantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case grant.EdgeGranter:
		if id := m.granter; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GrantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GrantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GrantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgranter {
		edges = append(edges, grant.EdgeGranter)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GrantMutation) EdgeCleared(name string) bool {
	switch name {
	case grant.EdgeGranter:
		return m.clearedgranter
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GrantMutation) ClearEdge(name string) error {
	switch name {
	case grant.EdgeGranter:
		m.ClearGranter()
		return nil
	}
	return fmt.Errorf("unknown Grant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GrantMutation) ResetEdge(name string) error {
	switch name {
	case grant.EdgeGranter:
		m.ResetGranter()
		return nil
	}
	return fmt.Errorf("unknown Grant edge %s", name)
}

// LensChainInfoMutation represents an operation that mutates the LensChainInfo nodes in the graph.
type LensChainInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	cnt_errors    *int
	addcnt_errors *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*LensChainInfo, error)
	predicates    []predicate.LensChainInfo
}

var _ ent.Mutation = (*LensChainInfoMutation)(nil)

// lenschaininfoOption allows management of the mutation configuration using functional options.
type lenschaininfoOption func(*LensChainInfoMutation)

// newLensChainInfoMutation creates new mutation for the LensChainInfo entity.
func newLensChainInfoMutation(c config, op Op, opts ...lenschaininfoOption) *LensChainInfoMutation {
	m := &LensChainInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeLensChainInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLensChainInfoID sets the ID field of the mutation.
func withLensChainInfoID(id int) lenschaininfoOption {
	return func(m *LensChainInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *LensChainInfo
		)
		m.oldValue = func(ctx context.Context) (*LensChainInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LensChainInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLensChainInfo sets the old LensChainInfo of the mutation.
func withLensChainInfo(node *LensChainInfo) lenschaininfoOption {
	return func(m *LensChainInfoMutation) {
		m.oldValue = func(context.Context) (*LensChainInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LensChainInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LensChainInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LensChainInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LensChainInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LensChainInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *LensChainInfoMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LensChainInfoMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the LensChainInfo entity.
// If the LensChainInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LensChainInfoMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LensChainInfoMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *LensChainInfoMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *LensChainInfoMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the LensChainInfo entity.
// If the LensChainInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LensChainInfoMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *LensChainInfoMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *LensChainInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LensChainInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LensChainInfo entity.
// If the LensChainInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LensChainInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LensChainInfoMutation) ResetName() {
	m.name = nil
}

// SetCntErrors sets the "cnt_errors" field.
func (m *LensChainInfoMutation) SetCntErrors(i int) {
	m.cnt_errors = &i
	m.addcnt_errors = nil
}

// CntErrors returns the value of the "cnt_errors" field in the mutation.
func (m *LensChainInfoMutation) CntErrors() (r int, exists bool) {
	v := m.cnt_errors
	if v == nil {
		return
	}
	return *v, true
}

// OldCntErrors returns the old "cnt_errors" field's value of the LensChainInfo entity.
// If the LensChainInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LensChainInfoMutation) OldCntErrors(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCntErrors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCntErrors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCntErrors: %w", err)
	}
	return oldValue.CntErrors, nil
}

// AddCntErrors adds i to the "cnt_errors" field.
func (m *LensChainInfoMutation) AddCntErrors(i int) {
	if m.addcnt_errors != nil {
		*m.addcnt_errors += i
	} else {
		m.addcnt_errors = &i
	}
}

// AddedCntErrors returns the value that was added to the "cnt_errors" field in this mutation.
func (m *LensChainInfoMutation) AddedCntErrors() (r int, exists bool) {
	v := m.addcnt_errors
	if v == nil {
		return
	}
	return *v, true
}

// ResetCntErrors resets all changes to the "cnt_errors" field.
func (m *LensChainInfoMutation) ResetCntErrors() {
	m.cnt_errors = nil
	m.addcnt_errors = nil
}

// Where appends a list predicates to the LensChainInfoMutation builder.
func (m *LensChainInfoMutation) Where(ps ...predicate.LensChainInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LensChainInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LensChainInfo).
func (m *LensChainInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LensChainInfoMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, lenschaininfo.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, lenschaininfo.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, lenschaininfo.FieldName)
	}
	if m.cnt_errors != nil {
		fields = append(fields, lenschaininfo.FieldCntErrors)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LensChainInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lenschaininfo.FieldCreateTime:
		return m.CreateTime()
	case lenschaininfo.FieldUpdateTime:
		return m.UpdateTime()
	case lenschaininfo.FieldName:
		return m.Name()
	case lenschaininfo.FieldCntErrors:
		return m.CntErrors()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LensChainInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lenschaininfo.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case lenschaininfo.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case lenschaininfo.FieldName:
		return m.OldName(ctx)
	case lenschaininfo.FieldCntErrors:
		return m.OldCntErrors(ctx)
	}
	return nil, fmt.Errorf("unknown LensChainInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LensChainInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lenschaininfo.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case lenschaininfo.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case lenschaininfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case lenschaininfo.FieldCntErrors:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCntErrors(v)
		return nil
	}
	return fmt.Errorf("unknown LensChainInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LensChainInfoMutation) AddedFields() []string {
	var fields []string
	if m.addcnt_errors != nil {
		fields = append(fields, lenschaininfo.FieldCntErrors)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LensChainInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lenschaininfo.FieldCntErrors:
		return m.AddedCntErrors()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LensChainInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lenschaininfo.FieldCntErrors:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCntErrors(v)
		return nil
	}
	return fmt.Errorf("unknown LensChainInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LensChainInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LensChainInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LensChainInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LensChainInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LensChainInfoMutation) ResetField(name string) error {
	switch name {
	case lenschaininfo.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case lenschaininfo.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case lenschaininfo.FieldName:
		m.ResetName()
		return nil
	case lenschaininfo.FieldCntErrors:
		m.ResetCntErrors()
		return nil
	}
	return fmt.Errorf("unknown LensChainInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LensChainInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LensChainInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LensChainInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LensChainInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LensChainInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LensChainInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LensChainInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LensChainInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LensChainInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LensChainInfo edge %s", name)
}

// ProposalMutation represents an operation that mutates the Proposal nodes in the graph.
type ProposalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	update_time       *time.Time
	proposal_id       *uint64
	addproposal_id    *int64
	title             *string
	description       *string
	voting_start_time *time.Time
	voting_end_time   *time.Time
	status            *proposal.Status
	clearedFields     map[string]struct{}
	chain             *int
	clearedchain      bool
	done              bool
	oldValue          func(context.Context) (*Proposal, error)
	predicates        []predicate.Proposal
}

var _ ent.Mutation = (*ProposalMutation)(nil)

// proposalOption allows management of the mutation configuration using functional options.
type proposalOption func(*ProposalMutation)

// newProposalMutation creates new mutation for the Proposal entity.
func newProposalMutation(c config, op Op, opts ...proposalOption) *ProposalMutation {
	m := &ProposalMutation{
		config:        c,
		op:            op,
		typ:           TypeProposal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProposalID sets the ID field of the mutation.
func withProposalID(id int) proposalOption {
	return func(m *ProposalMutation) {
		var (
			err   error
			once  sync.Once
			value *Proposal
		)
		m.oldValue = func(ctx context.Context) (*Proposal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Proposal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProposal sets the old Proposal of the mutation.
func withProposal(node *Proposal) proposalOption {
	return func(m *ProposalMutation) {
		m.oldValue = func(context.Context) (*Proposal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProposalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProposalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProposalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProposalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Proposal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ProposalMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ProposalMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ProposalMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ProposalMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ProposalMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ProposalMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetProposalID sets the "proposal_id" field.
func (m *ProposalMutation) SetProposalID(u uint64) {
	m.proposal_id = &u
	m.addproposal_id = nil
}

// ProposalID returns the value of the "proposal_id" field in the mutation.
func (m *ProposalMutation) ProposalID() (r uint64, exists bool) {
	v := m.proposal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProposalID returns the old "proposal_id" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldProposalID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProposalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProposalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProposalID: %w", err)
	}
	return oldValue.ProposalID, nil
}

// AddProposalID adds u to the "proposal_id" field.
func (m *ProposalMutation) AddProposalID(u int64) {
	if m.addproposal_id != nil {
		*m.addproposal_id += u
	} else {
		m.addproposal_id = &u
	}
}

// AddedProposalID returns the value that was added to the "proposal_id" field in this mutation.
func (m *ProposalMutation) AddedProposalID() (r int64, exists bool) {
	v := m.addproposal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProposalID resets all changes to the "proposal_id" field.
func (m *ProposalMutation) ResetProposalID() {
	m.proposal_id = nil
	m.addproposal_id = nil
}

// SetTitle sets the "title" field.
func (m *ProposalMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProposalMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProposalMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ProposalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProposalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProposalMutation) ResetDescription() {
	m.description = nil
}

// SetVotingStartTime sets the "voting_start_time" field.
func (m *ProposalMutation) SetVotingStartTime(t time.Time) {
	m.voting_start_time = &t
}

// VotingStartTime returns the value of the "voting_start_time" field in the mutation.
func (m *ProposalMutation) VotingStartTime() (r time.Time, exists bool) {
	v := m.voting_start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldVotingStartTime returns the old "voting_start_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldVotingStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotingStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotingStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotingStartTime: %w", err)
	}
	return oldValue.VotingStartTime, nil
}

// ResetVotingStartTime resets all changes to the "voting_start_time" field.
func (m *ProposalMutation) ResetVotingStartTime() {
	m.voting_start_time = nil
}

// SetVotingEndTime sets the "voting_end_time" field.
func (m *ProposalMutation) SetVotingEndTime(t time.Time) {
	m.voting_end_time = &t
}

// VotingEndTime returns the value of the "voting_end_time" field in the mutation.
func (m *ProposalMutation) VotingEndTime() (r time.Time, exists bool) {
	v := m.voting_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldVotingEndTime returns the old "voting_end_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldVotingEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotingEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotingEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotingEndTime: %w", err)
	}
	return oldValue.VotingEndTime, nil
}

// ResetVotingEndTime resets all changes to the "voting_end_time" field.
func (m *ProposalMutation) ResetVotingEndTime() {
	m.voting_end_time = nil
}

// SetStatus sets the "status" field.
func (m *ProposalMutation) SetStatus(pr proposal.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProposalMutation) Status() (r proposal.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldStatus(ctx context.Context) (v proposal.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProposalMutation) ResetStatus() {
	m.status = nil
}

// SetChainID sets the "chain" edge to the Chain entity by id.
func (m *ProposalMutation) SetChainID(id int) {
	m.chain = &id
}

// ClearChain clears the "chain" edge to the Chain entity.
func (m *ProposalMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the Chain entity was cleared.
func (m *ProposalMutation) ChainCleared() bool {
	return m.clearedchain
}

// ChainID returns the "chain" edge ID in the mutation.
func (m *ProposalMutation) ChainID() (id int, exists bool) {
	if m.chain != nil {
		return *m.chain, true
	}
	return
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *ProposalMutation) ChainIDs() (ids []int) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *ProposalMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// Where appends a list predicates to the ProposalMutation builder.
func (m *ProposalMutation) Where(ps ...predicate.Proposal) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProposalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Proposal).
func (m *ProposalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProposalMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, proposal.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, proposal.FieldUpdateTime)
	}
	if m.proposal_id != nil {
		fields = append(fields, proposal.FieldProposalID)
	}
	if m.title != nil {
		fields = append(fields, proposal.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, proposal.FieldDescription)
	}
	if m.voting_start_time != nil {
		fields = append(fields, proposal.FieldVotingStartTime)
	}
	if m.voting_end_time != nil {
		fields = append(fields, proposal.FieldVotingEndTime)
	}
	if m.status != nil {
		fields = append(fields, proposal.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProposalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case proposal.FieldCreateTime:
		return m.CreateTime()
	case proposal.FieldUpdateTime:
		return m.UpdateTime()
	case proposal.FieldProposalID:
		return m.ProposalID()
	case proposal.FieldTitle:
		return m.Title()
	case proposal.FieldDescription:
		return m.Description()
	case proposal.FieldVotingStartTime:
		return m.VotingStartTime()
	case proposal.FieldVotingEndTime:
		return m.VotingEndTime()
	case proposal.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProposalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case proposal.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case proposal.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case proposal.FieldProposalID:
		return m.OldProposalID(ctx)
	case proposal.FieldTitle:
		return m.OldTitle(ctx)
	case proposal.FieldDescription:
		return m.OldDescription(ctx)
	case proposal.FieldVotingStartTime:
		return m.OldVotingStartTime(ctx)
	case proposal.FieldVotingEndTime:
		return m.OldVotingEndTime(ctx)
	case proposal.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Proposal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case proposal.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case proposal.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case proposal.FieldProposalID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProposalID(v)
		return nil
	case proposal.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case proposal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case proposal.FieldVotingStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotingStartTime(v)
		return nil
	case proposal.FieldVotingEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotingEndTime(v)
		return nil
	case proposal.FieldStatus:
		v, ok := value.(proposal.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProposalMutation) AddedFields() []string {
	var fields []string
	if m.addproposal_id != nil {
		fields = append(fields, proposal.FieldProposalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProposalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case proposal.FieldProposalID:
		return m.AddedProposalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case proposal.FieldProposalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProposalID(v)
		return nil
	}
	return fmt.Errorf("unknown Proposal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProposalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProposalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProposalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Proposal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProposalMutation) ResetField(name string) error {
	switch name {
	case proposal.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case proposal.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case proposal.FieldProposalID:
		m.ResetProposalID()
		return nil
	case proposal.FieldTitle:
		m.ResetTitle()
		return nil
	case proposal.FieldDescription:
		m.ResetDescription()
		return nil
	case proposal.FieldVotingStartTime:
		m.ResetVotingStartTime()
		return nil
	case proposal.FieldVotingEndTime:
		m.ResetVotingEndTime()
		return nil
	case proposal.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProposalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chain != nil {
		edges = append(edges, proposal.EdgeChain)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProposalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case proposal.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProposalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProposalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProposalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchain {
		edges = append(edges, proposal.EdgeChain)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProposalMutation) EdgeCleared(name string) bool {
	switch name {
	case proposal.EdgeChain:
		return m.clearedchain
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProposalMutation) ClearEdge(name string) error {
	switch name {
	case proposal.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown Proposal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProposalMutation) ResetEdge(name string) error {
	switch name {
	case proposal.EdgeChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown Proposal edge %s", name)
}

// RpcEndpointMutation represents an operation that mutates the RpcEndpoint nodes in the graph.
type RpcEndpointMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	endpoint      *string
	clearedFields map[string]struct{}
	chain         *int
	clearedchain  bool
	done          bool
	oldValue      func(context.Context) (*RpcEndpoint, error)
	predicates    []predicate.RpcEndpoint
}

var _ ent.Mutation = (*RpcEndpointMutation)(nil)

// rpcendpointOption allows management of the mutation configuration using functional options.
type rpcendpointOption func(*RpcEndpointMutation)

// newRpcEndpointMutation creates new mutation for the RpcEndpoint entity.
func newRpcEndpointMutation(c config, op Op, opts ...rpcendpointOption) *RpcEndpointMutation {
	m := &RpcEndpointMutation{
		config:        c,
		op:            op,
		typ:           TypeRpcEndpoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRpcEndpointID sets the ID field of the mutation.
func withRpcEndpointID(id int) rpcendpointOption {
	return func(m *RpcEndpointMutation) {
		var (
			err   error
			once  sync.Once
			value *RpcEndpoint
		)
		m.oldValue = func(ctx context.Context) (*RpcEndpoint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RpcEndpoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRpcEndpoint sets the old RpcEndpoint of the mutation.
func withRpcEndpoint(node *RpcEndpoint) rpcendpointOption {
	return func(m *RpcEndpointMutation) {
		m.oldValue = func(context.Context) (*RpcEndpoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RpcEndpointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RpcEndpointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RpcEndpointMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RpcEndpointMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RpcEndpoint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *RpcEndpointMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RpcEndpointMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the RpcEndpoint entity.
// If the RpcEndpoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpcEndpointMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RpcEndpointMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *RpcEndpointMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *RpcEndpointMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the RpcEndpoint entity.
// If the RpcEndpoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpcEndpointMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *RpcEndpointMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetEndpoint sets the "endpoint" field.
func (m *RpcEndpointMutation) SetEndpoint(s string) {
	m.endpoint = &s
}

// Endpoint returns the value of the "endpoint" field in the mutation.
func (m *RpcEndpointMutation) Endpoint() (r string, exists bool) {
	v := m.endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldEndpoint returns the old "endpoint" field's value of the RpcEndpoint entity.
// If the RpcEndpoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RpcEndpointMutation) OldEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndpoint: %w", err)
	}
	return oldValue.Endpoint, nil
}

// ResetEndpoint resets all changes to the "endpoint" field.
func (m *RpcEndpointMutation) ResetEndpoint() {
	m.endpoint = nil
}

// SetChainID sets the "chain" edge to the Chain entity by id.
func (m *RpcEndpointMutation) SetChainID(id int) {
	m.chain = &id
}

// ClearChain clears the "chain" edge to the Chain entity.
func (m *RpcEndpointMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the Chain entity was cleared.
func (m *RpcEndpointMutation) ChainCleared() bool {
	return m.clearedchain
}

// ChainID returns the "chain" edge ID in the mutation.
func (m *RpcEndpointMutation) ChainID() (id int, exists bool) {
	if m.chain != nil {
		return *m.chain, true
	}
	return
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *RpcEndpointMutation) ChainIDs() (ids []int) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *RpcEndpointMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// Where appends a list predicates to the RpcEndpointMutation builder.
func (m *RpcEndpointMutation) Where(ps ...predicate.RpcEndpoint) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RpcEndpointMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RpcEndpoint).
func (m *RpcEndpointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RpcEndpointMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, rpcendpoint.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, rpcendpoint.FieldUpdateTime)
	}
	if m.endpoint != nil {
		fields = append(fields, rpcendpoint.FieldEndpoint)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RpcEndpointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rpcendpoint.FieldCreateTime:
		return m.CreateTime()
	case rpcendpoint.FieldUpdateTime:
		return m.UpdateTime()
	case rpcendpoint.FieldEndpoint:
		return m.Endpoint()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RpcEndpointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rpcendpoint.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case rpcendpoint.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case rpcendpoint.FieldEndpoint:
		return m.OldEndpoint(ctx)
	}
	return nil, fmt.Errorf("unknown RpcEndpoint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RpcEndpointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rpcendpoint.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case rpcendpoint.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case rpcendpoint.FieldEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndpoint(v)
		return nil
	}
	return fmt.Errorf("unknown RpcEndpoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RpcEndpointMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RpcEndpointMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RpcEndpointMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RpcEndpoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RpcEndpointMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RpcEndpointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RpcEndpointMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RpcEndpoint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RpcEndpointMutation) ResetField(name string) error {
	switch name {
	case rpcendpoint.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case rpcendpoint.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case rpcendpoint.FieldEndpoint:
		m.ResetEndpoint()
		return nil
	}
	return fmt.Errorf("unknown RpcEndpoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RpcEndpointMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chain != nil {
		edges = append(edges, rpcendpoint.EdgeChain)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RpcEndpointMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rpcendpoint.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RpcEndpointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RpcEndpointMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RpcEndpointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchain {
		edges = append(edges, rpcendpoint.EdgeChain)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RpcEndpointMutation) EdgeCleared(name string) bool {
	switch name {
	case rpcendpoint.EdgeChain:
		return m.clearedchain
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RpcEndpointMutation) ClearEdge(name string) error {
	switch name {
	case rpcendpoint.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown RpcEndpoint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RpcEndpointMutation) ResetEdge(name string) error {
	switch name {
	case rpcendpoint.EdgeChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown RpcEndpoint edge %s", name)
}

// TelegramChatMutation represents an operation that mutates the TelegramChat nodes in the graph.
type TelegramChatMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	chat_id       *int64
	addchat_id    *int64
	name          *string
	is_group      *bool
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	chains        map[int]struct{}
	removedchains map[int]struct{}
	clearedchains bool
	done          bool
	oldValue      func(context.Context) (*TelegramChat, error)
	predicates    []predicate.TelegramChat
}

var _ ent.Mutation = (*TelegramChatMutation)(nil)

// telegramchatOption allows management of the mutation configuration using functional options.
type telegramchatOption func(*TelegramChatMutation)

// newTelegramChatMutation creates new mutation for the TelegramChat entity.
func newTelegramChatMutation(c config, op Op, opts ...telegramchatOption) *TelegramChatMutation {
	m := &TelegramChatMutation{
		config:        c,
		op:            op,
		typ:           TypeTelegramChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTelegramChatID sets the ID field of the mutation.
func withTelegramChatID(id int) telegramchatOption {
	return func(m *TelegramChatMutation) {
		var (
			err   error
			once  sync.Once
			value *TelegramChat
		)
		m.oldValue = func(ctx context.Context) (*TelegramChat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TelegramChat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTelegramChat sets the old TelegramChat of the mutation.
func withTelegramChat(node *TelegramChat) telegramchatOption {
	return func(m *TelegramChatMutation) {
		m.oldValue = func(context.Context) (*TelegramChat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TelegramChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TelegramChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TelegramChatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TelegramChatMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TelegramChat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TelegramChatMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TelegramChatMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TelegramChatMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TelegramChatMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TelegramChatMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TelegramChatMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChatID sets the "chat_id" field.
func (m *TelegramChatMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *TelegramChatMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *TelegramChatMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *TelegramChatMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *TelegramChatMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetName sets the "name" field.
func (m *TelegramChatMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TelegramChatMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TelegramChatMutation) ResetName() {
	m.name = nil
}

// SetIsGroup sets the "is_group" field.
func (m *TelegramChatMutation) SetIsGroup(b bool) {
	m.is_group = &b
}

// IsGroup returns the value of the "is_group" field in the mutation.
func (m *TelegramChatMutation) IsGroup() (r bool, exists bool) {
	v := m.is_group
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGroup returns the old "is_group" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldIsGroup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGroup: %w", err)
	}
	return oldValue.IsGroup, nil
}

// ResetIsGroup resets all changes to the "is_group" field.
func (m *TelegramChatMutation) ResetIsGroup() {
	m.is_group = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TelegramChatMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TelegramChatMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TelegramChatMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TelegramChatMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TelegramChatMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TelegramChatMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddChainIDs adds the "chains" edge to the Chain entity by ids.
func (m *TelegramChatMutation) AddChainIDs(ids ...int) {
	if m.chains == nil {
		m.chains = make(map[int]struct{})
	}
	for i := range ids {
		m.chains[ids[i]] = struct{}{}
	}
}

// ClearChains clears the "chains" edge to the Chain entity.
func (m *TelegramChatMutation) ClearChains() {
	m.clearedchains = true
}

// ChainsCleared reports if the "chains" edge to the Chain entity was cleared.
func (m *TelegramChatMutation) ChainsCleared() bool {
	return m.clearedchains
}

// RemoveChainIDs removes the "chains" edge to the Chain entity by IDs.
func (m *TelegramChatMutation) RemoveChainIDs(ids ...int) {
	if m.removedchains == nil {
		m.removedchains = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chains, ids[i])
		m.removedchains[ids[i]] = struct{}{}
	}
}

// RemovedChains returns the removed IDs of the "chains" edge to the Chain entity.
func (m *TelegramChatMutation) RemovedChainsIDs() (ids []int) {
	for id := range m.removedchains {
		ids = append(ids, id)
	}
	return
}

// ChainsIDs returns the "chains" edge IDs in the mutation.
func (m *TelegramChatMutation) ChainsIDs() (ids []int) {
	for id := range m.chains {
		ids = append(ids, id)
	}
	return
}

// ResetChains resets all changes to the "chains" edge.
func (m *TelegramChatMutation) ResetChains() {
	m.chains = nil
	m.clearedchains = false
	m.removedchains = nil
}

// Where appends a list predicates to the TelegramChatMutation builder.
func (m *TelegramChatMutation) Where(ps ...predicate.TelegramChat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TelegramChatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TelegramChat).
func (m *TelegramChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TelegramChatMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, telegramchat.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, telegramchat.FieldUpdateTime)
	}
	if m.chat_id != nil {
		fields = append(fields, telegramchat.FieldChatID)
	}
	if m.name != nil {
		fields = append(fields, telegramchat.FieldName)
	}
	if m.is_group != nil {
		fields = append(fields, telegramchat.FieldIsGroup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TelegramChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case telegramchat.FieldCreateTime:
		return m.CreateTime()
	case telegramchat.FieldUpdateTime:
		return m.UpdateTime()
	case telegramchat.FieldChatID:
		return m.ChatID()
	case telegramchat.FieldName:
		return m.Name()
	case telegramchat.FieldIsGroup:
		return m.IsGroup()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TelegramChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case telegramchat.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case telegramchat.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case telegramchat.FieldChatID:
		return m.OldChatID(ctx)
	case telegramchat.FieldName:
		return m.OldName(ctx)
	case telegramchat.FieldIsGroup:
		return m.OldIsGroup(ctx)
	}
	return nil, fmt.Errorf("unknown TelegramChat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case telegramchat.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case telegramchat.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case telegramchat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case telegramchat.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case telegramchat.FieldIsGroup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGroup(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TelegramChatMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, telegramchat.FieldChatID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TelegramChatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case telegramchat.FieldChatID:
		return m.AddedChatID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case telegramchat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TelegramChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TelegramChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TelegramChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TelegramChat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TelegramChatMutation) ResetField(name string) error {
	switch name {
	case telegramchat.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case telegramchat.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case telegramchat.FieldChatID:
		m.ResetChatID()
		return nil
	case telegramchat.FieldName:
		m.ResetName()
		return nil
	case telegramchat.FieldIsGroup:
		m.ResetIsGroup()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TelegramChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, telegramchat.EdgeUser)
	}
	if m.chains != nil {
		edges = append(edges, telegramchat.EdgeChains)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TelegramChatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case telegramchat.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case telegramchat.EdgeChains:
		ids := make([]ent.Value, 0, len(m.chains))
		for id := range m.chains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TelegramChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchains != nil {
		edges = append(edges, telegramchat.EdgeChains)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TelegramChatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case telegramchat.EdgeChains:
		ids := make([]ent.Value, 0, len(m.removedchains))
		for id := range m.removedchains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TelegramChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, telegramchat.EdgeUser)
	}
	if m.clearedchains {
		edges = append(edges, telegramchat.EdgeChains)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TelegramChatMutation) EdgeCleared(name string) bool {
	switch name {
	case telegramchat.EdgeUser:
		return m.cleareduser
	case telegramchat.EdgeChains:
		return m.clearedchains
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TelegramChatMutation) ClearEdge(name string) error {
	switch name {
	case telegramchat.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TelegramChatMutation) ResetEdge(name string) error {
	switch name {
	case telegramchat.EdgeUser:
		m.ResetUser()
		return nil
	case telegramchat.EdgeChains:
		m.ResetChains()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	user_id                 *int64
	adduser_id              *int64
	name                    *string
	_type                   *user.Type
	login_token             *string
	clearedFields           map[string]struct{}
	telegram_chats          map[int]struct{}
	removedtelegram_chats   map[int]struct{}
	clearedtelegram_chats   bool
	discord_channels        map[int]struct{}
	removeddiscord_channels map[int]struct{}
	cleareddiscord_channels bool
	wallets                 map[int]struct{}
	removedwallets          map[int]struct{}
	clearedwallets          bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUserID sets the "user_id" field.
func (m *UserMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[user.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[user.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, user.FieldUserID)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(u user.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r user.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v user.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// SetLoginToken sets the "login_token" field.
func (m *UserMutation) SetLoginToken(s string) {
	m.login_token = &s
}

// LoginToken returns the value of the "login_token" field in the mutation.
func (m *UserMutation) LoginToken() (r string, exists bool) {
	v := m.login_token
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginToken returns the old "login_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLoginToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginToken: %w", err)
	}
	return oldValue.LoginToken, nil
}

// ResetLoginToken resets all changes to the "login_token" field.
func (m *UserMutation) ResetLoginToken() {
	m.login_token = nil
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by ids.
func (m *UserMutation) AddTelegramChatIDs(ids ...int) {
	if m.telegram_chats == nil {
		m.telegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		m.telegram_chats[ids[i]] = struct{}{}
	}
}

// ClearTelegramChats clears the "telegram_chats" edge to the TelegramChat entity.
func (m *UserMutation) ClearTelegramChats() {
	m.clearedtelegram_chats = true
}

// TelegramChatsCleared reports if the "telegram_chats" edge to the TelegramChat entity was cleared.
func (m *UserMutation) TelegramChatsCleared() bool {
	return m.clearedtelegram_chats
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to the TelegramChat entity by IDs.
func (m *UserMutation) RemoveTelegramChatIDs(ids ...int) {
	if m.removedtelegram_chats == nil {
		m.removedtelegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telegram_chats, ids[i])
		m.removedtelegram_chats[ids[i]] = struct{}{}
	}
}

// RemovedTelegramChats returns the removed IDs of the "telegram_chats" edge to the TelegramChat entity.
func (m *UserMutation) RemovedTelegramChatsIDs() (ids []int) {
	for id := range m.removedtelegram_chats {
		ids = append(ids, id)
	}
	return
}

// TelegramChatsIDs returns the "telegram_chats" edge IDs in the mutation.
func (m *UserMutation) TelegramChatsIDs() (ids []int) {
	for id := range m.telegram_chats {
		ids = append(ids, id)
	}
	return
}

// ResetTelegramChats resets all changes to the "telegram_chats" edge.
func (m *UserMutation) ResetTelegramChats() {
	m.telegram_chats = nil
	m.clearedtelegram_chats = false
	m.removedtelegram_chats = nil
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by ids.
func (m *UserMutation) AddDiscordChannelIDs(ids ...int) {
	if m.discord_channels == nil {
		m.discord_channels = make(map[int]struct{})
	}
	for i := range ids {
		m.discord_channels[ids[i]] = struct{}{}
	}
}

// ClearDiscordChannels clears the "discord_channels" edge to the DiscordChannel entity.
func (m *UserMutation) ClearDiscordChannels() {
	m.cleareddiscord_channels = true
}

// DiscordChannelsCleared reports if the "discord_channels" edge to the DiscordChannel entity was cleared.
func (m *UserMutation) DiscordChannelsCleared() bool {
	return m.cleareddiscord_channels
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to the DiscordChannel entity by IDs.
func (m *UserMutation) RemoveDiscordChannelIDs(ids ...int) {
	if m.removeddiscord_channels == nil {
		m.removeddiscord_channels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.discord_channels, ids[i])
		m.removeddiscord_channels[ids[i]] = struct{}{}
	}
}

// RemovedDiscordChannels returns the removed IDs of the "discord_channels" edge to the DiscordChannel entity.
func (m *UserMutation) RemovedDiscordChannelsIDs() (ids []int) {
	for id := range m.removeddiscord_channels {
		ids = append(ids, id)
	}
	return
}

// DiscordChannelsIDs returns the "discord_channels" edge IDs in the mutation.
func (m *UserMutation) DiscordChannelsIDs() (ids []int) {
	for id := range m.discord_channels {
		ids = append(ids, id)
	}
	return
}

// ResetDiscordChannels resets all changes to the "discord_channels" edge.
func (m *UserMutation) ResetDiscordChannels() {
	m.discord_channels = nil
	m.cleareddiscord_channels = false
	m.removeddiscord_channels = nil
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by ids.
func (m *UserMutation) AddWalletIDs(ids ...int) {
	if m.wallets == nil {
		m.wallets = make(map[int]struct{})
	}
	for i := range ids {
		m.wallets[ids[i]] = struct{}{}
	}
}

// ClearWallets clears the "wallets" edge to the Wallet entity.
func (m *UserMutation) ClearWallets() {
	m.clearedwallets = true
}

// WalletsCleared reports if the "wallets" edge to the Wallet entity was cleared.
func (m *UserMutation) WalletsCleared() bool {
	return m.clearedwallets
}

// RemoveWalletIDs removes the "wallets" edge to the Wallet entity by IDs.
func (m *UserMutation) RemoveWalletIDs(ids ...int) {
	if m.removedwallets == nil {
		m.removedwallets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.wallets, ids[i])
		m.removedwallets[ids[i]] = struct{}{}
	}
}

// RemovedWallets returns the removed IDs of the "wallets" edge to the Wallet entity.
func (m *UserMutation) RemovedWalletsIDs() (ids []int) {
	for id := range m.removedwallets {
		ids = append(ids, id)
	}
	return
}

// WalletsIDs returns the "wallets" edge IDs in the mutation.
func (m *UserMutation) WalletsIDs() (ids []int) {
	for id := range m.wallets {
		ids = append(ids, id)
	}
	return
}

// ResetWallets resets all changes to the "wallets" edge.
func (m *UserMutation) ResetWallets() {
	m.wallets = nil
	m.clearedwallets = false
	m.removedwallets = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.user_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	if m.login_token != nil {
		fields = append(fields, user.FieldLoginToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUserID:
		return m.UserID()
	case user.FieldName:
		return m.Name()
	case user.FieldType:
		return m.GetType()
	case user.FieldLoginToken:
		return m.LoginToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUserID:
		return m.OldUserID(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	case user.FieldLoginToken:
		return m.OldLoginToken(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldType:
		v, ok := value.(user.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case user.FieldLoginToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginToken(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUserID) {
		fields = append(fields, user.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	case user.FieldLoginToken:
		m.ResetLoginToken()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.telegram_chats != nil {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.discord_channels != nil {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	if m.wallets != nil {
		edges = append(edges, user.EdgeWallets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.telegram_chats))
		for id := range m.telegram_chats {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.discord_channels))
		for id := range m.discord_channels {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.wallets))
		for id := range m.wallets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtelegram_chats != nil {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.removeddiscord_channels != nil {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	if m.removedwallets != nil {
		edges = append(edges, user.EdgeWallets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.removedtelegram_chats))
		for id := range m.removedtelegram_chats {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.removeddiscord_channels))
		for id := range m.removeddiscord_channels {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.removedwallets))
		for id := range m.removedwallets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtelegram_chats {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.cleareddiscord_channels {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	if m.clearedwallets {
		edges = append(edges, user.EdgeWallets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTelegramChats:
		return m.clearedtelegram_chats
	case user.EdgeDiscordChannels:
		return m.cleareddiscord_channels
	case user.EdgeWallets:
		return m.clearedwallets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTelegramChats:
		m.ResetTelegramChats()
		return nil
	case user.EdgeDiscordChannels:
		m.ResetDiscordChannels()
		return nil
	case user.EdgeWallets:
		m.ResetWallets()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WalletMutation represents an operation that mutates the Wallet nodes in the graph.
type WalletMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	address       *string
	clearedFields map[string]struct{}
	users         map[int]struct{}
	removedusers  map[int]struct{}
	clearedusers  bool
	chain         *int
	clearedchain  bool
	grants        map[int]struct{}
	removedgrants map[int]struct{}
	clearedgrants bool
	done          bool
	oldValue      func(context.Context) (*Wallet, error)
	predicates    []predicate.Wallet
}

var _ ent.Mutation = (*WalletMutation)(nil)

// walletOption allows management of the mutation configuration using functional options.
type walletOption func(*WalletMutation)

// newWalletMutation creates new mutation for the Wallet entity.
func newWalletMutation(c config, op Op, opts ...walletOption) *WalletMutation {
	m := &WalletMutation{
		config:        c,
		op:            op,
		typ:           TypeWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletID sets the ID field of the mutation.
func withWalletID(id int) walletOption {
	return func(m *WalletMutation) {
		var (
			err   error
			once  sync.Once
			value *Wallet
		)
		m.oldValue = func(ctx context.Context) (*Wallet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Wallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWallet sets the old Wallet of the mutation.
func withWallet(node *Wallet) walletOption {
	return func(m *WalletMutation) {
		m.oldValue = func(context.Context) (*Wallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WalletMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Wallet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *WalletMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WalletMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WalletMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *WalletMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *WalletMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *WalletMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetAddress sets the "address" field.
func (m *WalletMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *WalletMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *WalletMutation) ResetAddress() {
	m.address = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *WalletMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *WalletMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *WalletMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *WalletMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *WalletMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *WalletMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *WalletMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// SetChainID sets the "chain" edge to the Chain entity by id.
func (m *WalletMutation) SetChainID(id int) {
	m.chain = &id
}

// ClearChain clears the "chain" edge to the Chain entity.
func (m *WalletMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the Chain entity was cleared.
func (m *WalletMutation) ChainCleared() bool {
	return m.clearedchain
}

// ChainID returns the "chain" edge ID in the mutation.
func (m *WalletMutation) ChainID() (id int, exists bool) {
	if m.chain != nil {
		return *m.chain, true
	}
	return
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *WalletMutation) ChainIDs() (ids []int) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *WalletMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// AddGrantIDs adds the "grants" edge to the Grant entity by ids.
func (m *WalletMutation) AddGrantIDs(ids ...int) {
	if m.grants == nil {
		m.grants = make(map[int]struct{})
	}
	for i := range ids {
		m.grants[ids[i]] = struct{}{}
	}
}

// ClearGrants clears the "grants" edge to the Grant entity.
func (m *WalletMutation) ClearGrants() {
	m.clearedgrants = true
}

// GrantsCleared reports if the "grants" edge to the Grant entity was cleared.
func (m *WalletMutation) GrantsCleared() bool {
	return m.clearedgrants
}

// RemoveGrantIDs removes the "grants" edge to the Grant entity by IDs.
func (m *WalletMutation) RemoveGrantIDs(ids ...int) {
	if m.removedgrants == nil {
		m.removedgrants = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.grants, ids[i])
		m.removedgrants[ids[i]] = struct{}{}
	}
}

// RemovedGrants returns the removed IDs of the "grants" edge to the Grant entity.
func (m *WalletMutation) RemovedGrantsIDs() (ids []int) {
	for id := range m.removedgrants {
		ids = append(ids, id)
	}
	return
}

// GrantsIDs returns the "grants" edge IDs in the mutation.
func (m *WalletMutation) GrantsIDs() (ids []int) {
	for id := range m.grants {
		ids = append(ids, id)
	}
	return
}

// ResetGrants resets all changes to the "grants" edge.
func (m *WalletMutation) ResetGrants() {
	m.grants = nil
	m.clearedgrants = false
	m.removedgrants = nil
}

// Where appends a list predicates to the WalletMutation builder.
func (m *WalletMutation) Where(ps ...predicate.Wallet) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WalletMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Wallet).
func (m *WalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, wallet.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, wallet.FieldUpdateTime)
	}
	if m.address != nil {
		fields = append(fields, wallet.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldCreateTime:
		return m.CreateTime()
	case wallet.FieldUpdateTime:
		return m.UpdateTime()
	case wallet.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallet.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case wallet.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case wallet.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Wallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case wallet.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case wallet.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Wallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Wallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletMutation) ResetField(name string) error {
	switch name {
	case wallet.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case wallet.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case wallet.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, wallet.EdgeUsers)
	}
	if m.chain != nil {
		edges = append(edges, wallet.EdgeChain)
	}
	if m.grants != nil {
		edges = append(edges, wallet.EdgeGrants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case wallet.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	case wallet.EdgeGrants:
		ids := make([]ent.Value, 0, len(m.grants))
		for id := range m.grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, wallet.EdgeUsers)
	}
	if m.removedgrants != nil {
		edges = append(edges, wallet.EdgeGrants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case wallet.EdgeGrants:
		ids := make([]ent.Value, 0, len(m.removedgrants))
		for id := range m.removedgrants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, wallet.EdgeUsers)
	}
	if m.clearedchain {
		edges = append(edges, wallet.EdgeChain)
	}
	if m.clearedgrants {
		edges = append(edges, wallet.EdgeGrants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletMutation) EdgeCleared(name string) bool {
	switch name {
	case wallet.EdgeUsers:
		return m.clearedusers
	case wallet.EdgeChain:
		return m.clearedchain
	case wallet.EdgeGrants:
		return m.clearedgrants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletMutation) ClearEdge(name string) error {
	switch name {
	case wallet.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown Wallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletMutation) ResetEdge(name string) error {
	switch name {
	case wallet.EdgeUsers:
		m.ResetUsers()
		return nil
	case wallet.EdgeChain:
		m.ResetChain()
		return nil
	case wallet.EdgeGrants:
		m.ResetGrants()
		return nil
	}
	return fmt.Errorf("unknown Wallet edge %s", name)
}
