// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/discordchannel"
	"github.com/shifty11/cosmos-gov/ent/draftproposal"
	"github.com/shifty11/cosmos-gov/ent/predicate"
	"github.com/shifty11/cosmos-gov/ent/proposal"
	"github.com/shifty11/cosmos-gov/ent/rpcendpoint"
	"github.com/shifty11/cosmos-gov/ent/telegramchat"
	"github.com/shifty11/cosmos-gov/ent/wallet"
)

// ChainUpdate is the builder for updating Chain entities.
type ChainUpdate struct {
	config
	hooks    []Hook
	mutation *ChainMutation
}

// Where appends a list predicates to the ChainUpdate builder.
func (cu *ChainUpdate) Where(ps ...predicate.Chain) *ChainUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *ChainUpdate) SetUpdateTime(t time.Time) *ChainUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetChainID sets the "chain_id" field.
func (cu *ChainUpdate) SetChainID(s string) *ChainUpdate {
	cu.mutation.SetChainID(s)
	return cu
}

// SetAccountPrefix sets the "account_prefix" field.
func (cu *ChainUpdate) SetAccountPrefix(s string) *ChainUpdate {
	cu.mutation.SetAccountPrefix(s)
	return cu
}

// SetName sets the "name" field.
func (cu *ChainUpdate) SetName(s string) *ChainUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *ChainUpdate) SetDisplayName(s string) *ChainUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetIsEnabled sets the "is_enabled" field.
func (cu *ChainUpdate) SetIsEnabled(b bool) *ChainUpdate {
	cu.mutation.SetIsEnabled(b)
	return cu
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (cu *ChainUpdate) SetNillableIsEnabled(b *bool) *ChainUpdate {
	if b != nil {
		cu.SetIsEnabled(*b)
	}
	return cu
}

// SetIsVotingEnabled sets the "is_voting_enabled" field.
func (cu *ChainUpdate) SetIsVotingEnabled(b bool) *ChainUpdate {
	cu.mutation.SetIsVotingEnabled(b)
	return cu
}

// SetNillableIsVotingEnabled sets the "is_voting_enabled" field if the given value is not nil.
func (cu *ChainUpdate) SetNillableIsVotingEnabled(b *bool) *ChainUpdate {
	if b != nil {
		cu.SetIsVotingEnabled(*b)
	}
	return cu
}

// SetIsFeegrantUsed sets the "is_feegrant_used" field.
func (cu *ChainUpdate) SetIsFeegrantUsed(b bool) *ChainUpdate {
	cu.mutation.SetIsFeegrantUsed(b)
	return cu
}

// SetNillableIsFeegrantUsed sets the "is_feegrant_used" field if the given value is not nil.
func (cu *ChainUpdate) SetNillableIsFeegrantUsed(b *bool) *ChainUpdate {
	if b != nil {
		cu.SetIsFeegrantUsed(*b)
	}
	return cu
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by IDs.
func (cu *ChainUpdate) AddProposalIDs(ids ...int) *ChainUpdate {
	cu.mutation.AddProposalIDs(ids...)
	return cu
}

// AddProposals adds the "proposals" edges to the Proposal entity.
func (cu *ChainUpdate) AddProposals(p ...*Proposal) *ChainUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProposalIDs(ids...)
}

// AddDraftProposalIDs adds the "draft_proposals" edge to the DraftProposal entity by IDs.
func (cu *ChainUpdate) AddDraftProposalIDs(ids ...int) *ChainUpdate {
	cu.mutation.AddDraftProposalIDs(ids...)
	return cu
}

// AddDraftProposals adds the "draft_proposals" edges to the DraftProposal entity.
func (cu *ChainUpdate) AddDraftProposals(d ...*DraftProposal) *ChainUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDraftProposalIDs(ids...)
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by IDs.
func (cu *ChainUpdate) AddTelegramChatIDs(ids ...int) *ChainUpdate {
	cu.mutation.AddTelegramChatIDs(ids...)
	return cu
}

// AddTelegramChats adds the "telegram_chats" edges to the TelegramChat entity.
func (cu *ChainUpdate) AddTelegramChats(t ...*TelegramChat) *ChainUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTelegramChatIDs(ids...)
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by IDs.
func (cu *ChainUpdate) AddDiscordChannelIDs(ids ...int) *ChainUpdate {
	cu.mutation.AddDiscordChannelIDs(ids...)
	return cu
}

// AddDiscordChannels adds the "discord_channels" edges to the DiscordChannel entity.
func (cu *ChainUpdate) AddDiscordChannels(d ...*DiscordChannel) *ChainUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDiscordChannelIDs(ids...)
}

// AddRPCEndpointIDs adds the "rpc_endpoints" edge to the RpcEndpoint entity by IDs.
func (cu *ChainUpdate) AddRPCEndpointIDs(ids ...int) *ChainUpdate {
	cu.mutation.AddRPCEndpointIDs(ids...)
	return cu
}

// AddRPCEndpoints adds the "rpc_endpoints" edges to the RpcEndpoint entity.
func (cu *ChainUpdate) AddRPCEndpoints(r ...*RpcEndpoint) *ChainUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRPCEndpointIDs(ids...)
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by IDs.
func (cu *ChainUpdate) AddWalletIDs(ids ...int) *ChainUpdate {
	cu.mutation.AddWalletIDs(ids...)
	return cu
}

// AddWallets adds the "wallets" edges to the Wallet entity.
func (cu *ChainUpdate) AddWallets(w ...*Wallet) *ChainUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWalletIDs(ids...)
}

// Mutation returns the ChainMutation object of the builder.
func (cu *ChainUpdate) Mutation() *ChainMutation {
	return cu.mutation
}

// ClearProposals clears all "proposals" edges to the Proposal entity.
func (cu *ChainUpdate) ClearProposals() *ChainUpdate {
	cu.mutation.ClearProposals()
	return cu
}

// RemoveProposalIDs removes the "proposals" edge to Proposal entities by IDs.
func (cu *ChainUpdate) RemoveProposalIDs(ids ...int) *ChainUpdate {
	cu.mutation.RemoveProposalIDs(ids...)
	return cu
}

// RemoveProposals removes "proposals" edges to Proposal entities.
func (cu *ChainUpdate) RemoveProposals(p ...*Proposal) *ChainUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProposalIDs(ids...)
}

// ClearDraftProposals clears all "draft_proposals" edges to the DraftProposal entity.
func (cu *ChainUpdate) ClearDraftProposals() *ChainUpdate {
	cu.mutation.ClearDraftProposals()
	return cu
}

// RemoveDraftProposalIDs removes the "draft_proposals" edge to DraftProposal entities by IDs.
func (cu *ChainUpdate) RemoveDraftProposalIDs(ids ...int) *ChainUpdate {
	cu.mutation.RemoveDraftProposalIDs(ids...)
	return cu
}

// RemoveDraftProposals removes "draft_proposals" edges to DraftProposal entities.
func (cu *ChainUpdate) RemoveDraftProposals(d ...*DraftProposal) *ChainUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDraftProposalIDs(ids...)
}

// ClearTelegramChats clears all "telegram_chats" edges to the TelegramChat entity.
func (cu *ChainUpdate) ClearTelegramChats() *ChainUpdate {
	cu.mutation.ClearTelegramChats()
	return cu
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to TelegramChat entities by IDs.
func (cu *ChainUpdate) RemoveTelegramChatIDs(ids ...int) *ChainUpdate {
	cu.mutation.RemoveTelegramChatIDs(ids...)
	return cu
}

// RemoveTelegramChats removes "telegram_chats" edges to TelegramChat entities.
func (cu *ChainUpdate) RemoveTelegramChats(t ...*TelegramChat) *ChainUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTelegramChatIDs(ids...)
}

// ClearDiscordChannels clears all "discord_channels" edges to the DiscordChannel entity.
func (cu *ChainUpdate) ClearDiscordChannels() *ChainUpdate {
	cu.mutation.ClearDiscordChannels()
	return cu
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to DiscordChannel entities by IDs.
func (cu *ChainUpdate) RemoveDiscordChannelIDs(ids ...int) *ChainUpdate {
	cu.mutation.RemoveDiscordChannelIDs(ids...)
	return cu
}

// RemoveDiscordChannels removes "discord_channels" edges to DiscordChannel entities.
func (cu *ChainUpdate) RemoveDiscordChannels(d ...*DiscordChannel) *ChainUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDiscordChannelIDs(ids...)
}

// ClearRPCEndpoints clears all "rpc_endpoints" edges to the RpcEndpoint entity.
func (cu *ChainUpdate) ClearRPCEndpoints() *ChainUpdate {
	cu.mutation.ClearRPCEndpoints()
	return cu
}

// RemoveRPCEndpointIDs removes the "rpc_endpoints" edge to RpcEndpoint entities by IDs.
func (cu *ChainUpdate) RemoveRPCEndpointIDs(ids ...int) *ChainUpdate {
	cu.mutation.RemoveRPCEndpointIDs(ids...)
	return cu
}

// RemoveRPCEndpoints removes "rpc_endpoints" edges to RpcEndpoint entities.
func (cu *ChainUpdate) RemoveRPCEndpoints(r ...*RpcEndpoint) *ChainUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRPCEndpointIDs(ids...)
}

// ClearWallets clears all "wallets" edges to the Wallet entity.
func (cu *ChainUpdate) ClearWallets() *ChainUpdate {
	cu.mutation.ClearWallets()
	return cu
}

// RemoveWalletIDs removes the "wallets" edge to Wallet entities by IDs.
func (cu *ChainUpdate) RemoveWalletIDs(ids ...int) *ChainUpdate {
	cu.mutation.RemoveWalletIDs(ids...)
	return cu
}

// RemoveWallets removes "wallets" edges to Wallet entities.
func (cu *ChainUpdate) RemoveWallets(w ...*Wallet) *ChainUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWalletIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChainUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChainUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChainUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChainUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChainUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := chain.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

func (cu *ChainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chain.Table,
			Columns: chain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chain.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chain.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldChainID,
		})
	}
	if value, ok := cu.mutation.AccountPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldAccountPrefix,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldName,
		})
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldDisplayName,
		})
	}
	if value, ok := cu.mutation.IsEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chain.FieldIsEnabled,
		})
	}
	if value, ok := cu.mutation.IsVotingEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chain.FieldIsVotingEnabled,
		})
	}
	if value, ok := cu.mutation.IsFeegrantUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chain.FieldIsFeegrantUsed,
		})
	}
	if cu.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.ProposalsTable,
			Columns: []string{chain.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProposalsIDs(); len(nodes) > 0 && !cu.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.ProposalsTable,
			Columns: []string{chain.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.ProposalsTable,
			Columns: []string{chain.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DraftProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.DraftProposalsTable,
			Columns: []string{chain.DraftProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: draftproposal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDraftProposalsIDs(); len(nodes) > 0 && !cu.mutation.DraftProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.DraftProposalsTable,
			Columns: []string{chain.DraftProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: draftproposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DraftProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.DraftProposalsTable,
			Columns: []string{chain.DraftProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: draftproposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TelegramChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.TelegramChatsTable,
			Columns: chain.TelegramChatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: telegramchat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTelegramChatsIDs(); len(nodes) > 0 && !cu.mutation.TelegramChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.TelegramChatsTable,
			Columns: chain.TelegramChatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: telegramchat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TelegramChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.TelegramChatsTable,
			Columns: chain.TelegramChatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: telegramchat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DiscordChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.DiscordChannelsTable,
			Columns: chain.DiscordChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordchannel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDiscordChannelsIDs(); len(nodes) > 0 && !cu.mutation.DiscordChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.DiscordChannelsTable,
			Columns: chain.DiscordChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DiscordChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.DiscordChannelsTable,
			Columns: chain.DiscordChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RPCEndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.RPCEndpointsTable,
			Columns: []string{chain.RPCEndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rpcendpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRPCEndpointsIDs(); len(nodes) > 0 && !cu.mutation.RPCEndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.RPCEndpointsTable,
			Columns: []string{chain.RPCEndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rpcendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RPCEndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.RPCEndpointsTable,
			Columns: []string{chain.RPCEndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rpcendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.WalletsTable,
			Columns: []string{chain.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWalletsIDs(); len(nodes) > 0 && !cu.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.WalletsTable,
			Columns: []string{chain.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.WalletsTable,
			Columns: []string{chain.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ChainUpdateOne is the builder for updating a single Chain entity.
type ChainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChainMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *ChainUpdateOne) SetUpdateTime(t time.Time) *ChainUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetChainID sets the "chain_id" field.
func (cuo *ChainUpdateOne) SetChainID(s string) *ChainUpdateOne {
	cuo.mutation.SetChainID(s)
	return cuo
}

// SetAccountPrefix sets the "account_prefix" field.
func (cuo *ChainUpdateOne) SetAccountPrefix(s string) *ChainUpdateOne {
	cuo.mutation.SetAccountPrefix(s)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ChainUpdateOne) SetName(s string) *ChainUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *ChainUpdateOne) SetDisplayName(s string) *ChainUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetIsEnabled sets the "is_enabled" field.
func (cuo *ChainUpdateOne) SetIsEnabled(b bool) *ChainUpdateOne {
	cuo.mutation.SetIsEnabled(b)
	return cuo
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (cuo *ChainUpdateOne) SetNillableIsEnabled(b *bool) *ChainUpdateOne {
	if b != nil {
		cuo.SetIsEnabled(*b)
	}
	return cuo
}

// SetIsVotingEnabled sets the "is_voting_enabled" field.
func (cuo *ChainUpdateOne) SetIsVotingEnabled(b bool) *ChainUpdateOne {
	cuo.mutation.SetIsVotingEnabled(b)
	return cuo
}

// SetNillableIsVotingEnabled sets the "is_voting_enabled" field if the given value is not nil.
func (cuo *ChainUpdateOne) SetNillableIsVotingEnabled(b *bool) *ChainUpdateOne {
	if b != nil {
		cuo.SetIsVotingEnabled(*b)
	}
	return cuo
}

// SetIsFeegrantUsed sets the "is_feegrant_used" field.
func (cuo *ChainUpdateOne) SetIsFeegrantUsed(b bool) *ChainUpdateOne {
	cuo.mutation.SetIsFeegrantUsed(b)
	return cuo
}

// SetNillableIsFeegrantUsed sets the "is_feegrant_used" field if the given value is not nil.
func (cuo *ChainUpdateOne) SetNillableIsFeegrantUsed(b *bool) *ChainUpdateOne {
	if b != nil {
		cuo.SetIsFeegrantUsed(*b)
	}
	return cuo
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by IDs.
func (cuo *ChainUpdateOne) AddProposalIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.AddProposalIDs(ids...)
	return cuo
}

// AddProposals adds the "proposals" edges to the Proposal entity.
func (cuo *ChainUpdateOne) AddProposals(p ...*Proposal) *ChainUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProposalIDs(ids...)
}

// AddDraftProposalIDs adds the "draft_proposals" edge to the DraftProposal entity by IDs.
func (cuo *ChainUpdateOne) AddDraftProposalIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.AddDraftProposalIDs(ids...)
	return cuo
}

// AddDraftProposals adds the "draft_proposals" edges to the DraftProposal entity.
func (cuo *ChainUpdateOne) AddDraftProposals(d ...*DraftProposal) *ChainUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDraftProposalIDs(ids...)
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by IDs.
func (cuo *ChainUpdateOne) AddTelegramChatIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.AddTelegramChatIDs(ids...)
	return cuo
}

// AddTelegramChats adds the "telegram_chats" edges to the TelegramChat entity.
func (cuo *ChainUpdateOne) AddTelegramChats(t ...*TelegramChat) *ChainUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTelegramChatIDs(ids...)
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by IDs.
func (cuo *ChainUpdateOne) AddDiscordChannelIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.AddDiscordChannelIDs(ids...)
	return cuo
}

// AddDiscordChannels adds the "discord_channels" edges to the DiscordChannel entity.
func (cuo *ChainUpdateOne) AddDiscordChannels(d ...*DiscordChannel) *ChainUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDiscordChannelIDs(ids...)
}

// AddRPCEndpointIDs adds the "rpc_endpoints" edge to the RpcEndpoint entity by IDs.
func (cuo *ChainUpdateOne) AddRPCEndpointIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.AddRPCEndpointIDs(ids...)
	return cuo
}

// AddRPCEndpoints adds the "rpc_endpoints" edges to the RpcEndpoint entity.
func (cuo *ChainUpdateOne) AddRPCEndpoints(r ...*RpcEndpoint) *ChainUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRPCEndpointIDs(ids...)
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by IDs.
func (cuo *ChainUpdateOne) AddWalletIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.AddWalletIDs(ids...)
	return cuo
}

// AddWallets adds the "wallets" edges to the Wallet entity.
func (cuo *ChainUpdateOne) AddWallets(w ...*Wallet) *ChainUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWalletIDs(ids...)
}

// Mutation returns the ChainMutation object of the builder.
func (cuo *ChainUpdateOne) Mutation() *ChainMutation {
	return cuo.mutation
}

// ClearProposals clears all "proposals" edges to the Proposal entity.
func (cuo *ChainUpdateOne) ClearProposals() *ChainUpdateOne {
	cuo.mutation.ClearProposals()
	return cuo
}

// RemoveProposalIDs removes the "proposals" edge to Proposal entities by IDs.
func (cuo *ChainUpdateOne) RemoveProposalIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.RemoveProposalIDs(ids...)
	return cuo
}

// RemoveProposals removes "proposals" edges to Proposal entities.
func (cuo *ChainUpdateOne) RemoveProposals(p ...*Proposal) *ChainUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProposalIDs(ids...)
}

// ClearDraftProposals clears all "draft_proposals" edges to the DraftProposal entity.
func (cuo *ChainUpdateOne) ClearDraftProposals() *ChainUpdateOne {
	cuo.mutation.ClearDraftProposals()
	return cuo
}

// RemoveDraftProposalIDs removes the "draft_proposals" edge to DraftProposal entities by IDs.
func (cuo *ChainUpdateOne) RemoveDraftProposalIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.RemoveDraftProposalIDs(ids...)
	return cuo
}

// RemoveDraftProposals removes "draft_proposals" edges to DraftProposal entities.
func (cuo *ChainUpdateOne) RemoveDraftProposals(d ...*DraftProposal) *ChainUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDraftProposalIDs(ids...)
}

// ClearTelegramChats clears all "telegram_chats" edges to the TelegramChat entity.
func (cuo *ChainUpdateOne) ClearTelegramChats() *ChainUpdateOne {
	cuo.mutation.ClearTelegramChats()
	return cuo
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to TelegramChat entities by IDs.
func (cuo *ChainUpdateOne) RemoveTelegramChatIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.RemoveTelegramChatIDs(ids...)
	return cuo
}

// RemoveTelegramChats removes "telegram_chats" edges to TelegramChat entities.
func (cuo *ChainUpdateOne) RemoveTelegramChats(t ...*TelegramChat) *ChainUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTelegramChatIDs(ids...)
}

// ClearDiscordChannels clears all "discord_channels" edges to the DiscordChannel entity.
func (cuo *ChainUpdateOne) ClearDiscordChannels() *ChainUpdateOne {
	cuo.mutation.ClearDiscordChannels()
	return cuo
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to DiscordChannel entities by IDs.
func (cuo *ChainUpdateOne) RemoveDiscordChannelIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.RemoveDiscordChannelIDs(ids...)
	return cuo
}

// RemoveDiscordChannels removes "discord_channels" edges to DiscordChannel entities.
func (cuo *ChainUpdateOne) RemoveDiscordChannels(d ...*DiscordChannel) *ChainUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDiscordChannelIDs(ids...)
}

// ClearRPCEndpoints clears all "rpc_endpoints" edges to the RpcEndpoint entity.
func (cuo *ChainUpdateOne) ClearRPCEndpoints() *ChainUpdateOne {
	cuo.mutation.ClearRPCEndpoints()
	return cuo
}

// RemoveRPCEndpointIDs removes the "rpc_endpoints" edge to RpcEndpoint entities by IDs.
func (cuo *ChainUpdateOne) RemoveRPCEndpointIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.RemoveRPCEndpointIDs(ids...)
	return cuo
}

// RemoveRPCEndpoints removes "rpc_endpoints" edges to RpcEndpoint entities.
func (cuo *ChainUpdateOne) RemoveRPCEndpoints(r ...*RpcEndpoint) *ChainUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRPCEndpointIDs(ids...)
}

// ClearWallets clears all "wallets" edges to the Wallet entity.
func (cuo *ChainUpdateOne) ClearWallets() *ChainUpdateOne {
	cuo.mutation.ClearWallets()
	return cuo
}

// RemoveWalletIDs removes the "wallets" edge to Wallet entities by IDs.
func (cuo *ChainUpdateOne) RemoveWalletIDs(ids ...int) *ChainUpdateOne {
	cuo.mutation.RemoveWalletIDs(ids...)
	return cuo
}

// RemoveWallets removes "wallets" edges to Wallet entities.
func (cuo *ChainUpdateOne) RemoveWallets(w ...*Wallet) *ChainUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWalletIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChainUpdateOne) Select(field string, fields ...string) *ChainUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chain entity.
func (cuo *ChainUpdateOne) Save(ctx context.Context) (*Chain, error) {
	var (
		err  error
		node *Chain
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChainUpdateOne) SaveX(ctx context.Context) *Chain {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChainUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChainUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChainUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := chain.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

func (cuo *ChainUpdateOne) sqlSave(ctx context.Context) (_node *Chain, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chain.Table,
			Columns: chain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chain.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chain.FieldID)
		for _, f := range fields {
			if !chain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chain.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldChainID,
		})
	}
	if value, ok := cuo.mutation.AccountPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldAccountPrefix,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldName,
		})
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chain.FieldDisplayName,
		})
	}
	if value, ok := cuo.mutation.IsEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chain.FieldIsEnabled,
		})
	}
	if value, ok := cuo.mutation.IsVotingEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chain.FieldIsVotingEnabled,
		})
	}
	if value, ok := cuo.mutation.IsFeegrantUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chain.FieldIsFeegrantUsed,
		})
	}
	if cuo.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.ProposalsTable,
			Columns: []string{chain.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProposalsIDs(); len(nodes) > 0 && !cuo.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.ProposalsTable,
			Columns: []string{chain.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.ProposalsTable,
			Columns: []string{chain.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DraftProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.DraftProposalsTable,
			Columns: []string{chain.DraftProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: draftproposal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDraftProposalsIDs(); len(nodes) > 0 && !cuo.mutation.DraftProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.DraftProposalsTable,
			Columns: []string{chain.DraftProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: draftproposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DraftProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.DraftProposalsTable,
			Columns: []string{chain.DraftProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: draftproposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TelegramChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.TelegramChatsTable,
			Columns: chain.TelegramChatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: telegramchat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTelegramChatsIDs(); len(nodes) > 0 && !cuo.mutation.TelegramChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.TelegramChatsTable,
			Columns: chain.TelegramChatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: telegramchat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TelegramChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.TelegramChatsTable,
			Columns: chain.TelegramChatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: telegramchat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DiscordChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.DiscordChannelsTable,
			Columns: chain.DiscordChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordchannel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDiscordChannelsIDs(); len(nodes) > 0 && !cuo.mutation.DiscordChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.DiscordChannelsTable,
			Columns: chain.DiscordChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DiscordChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chain.DiscordChannelsTable,
			Columns: chain.DiscordChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RPCEndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.RPCEndpointsTable,
			Columns: []string{chain.RPCEndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rpcendpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRPCEndpointsIDs(); len(nodes) > 0 && !cuo.mutation.RPCEndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.RPCEndpointsTable,
			Columns: []string{chain.RPCEndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rpcendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RPCEndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.RPCEndpointsTable,
			Columns: []string{chain.RPCEndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rpcendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.WalletsTable,
			Columns: []string{chain.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWalletsIDs(); len(nodes) > 0 && !cuo.mutation.WalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.WalletsTable,
			Columns: []string{chain.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chain.WalletsTable,
			Columns: []string{chain.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chain{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
