// Code generated by entc, DO NOT EDIT.

package wallet

import (
	"time"
)

const (
	// Label holds the string label denoting the wallet type in the database.
	Label = "wallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeChain holds the string denoting the chain edge name in mutations.
	EdgeChain = "chain"
	// EdgeGrants holds the string denoting the grants edge name in mutations.
	EdgeGrants = "grants"
	// Table holds the table name of the wallet in the database.
	Table = "wallets"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_wallets"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// ChainTable is the table that holds the chain relation/edge.
	ChainTable = "wallets"
	// ChainInverseTable is the table name for the Chain entity.
	// It exists in this package in order to avoid circular dependency with the "chain" package.
	ChainInverseTable = "chains"
	// ChainColumn is the table column denoting the chain relation/edge.
	ChainColumn = "chain_wallets"
	// GrantsTable is the table that holds the grants relation/edge.
	GrantsTable = "grants"
	// GrantsInverseTable is the table name for the Grant entity.
	// It exists in this package in order to avoid circular dependency with the "grant" package.
	GrantsInverseTable = "grants"
	// GrantsColumn is the table column denoting the grants relation/edge.
	GrantsColumn = "wallet_grants"
)

// Columns holds all SQL columns for wallet fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldAddress,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "wallets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"chain_wallets",
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "wallet_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
