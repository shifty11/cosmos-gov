// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/shifty11/cosmos-gov/ent/migrate"

	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/discordchannel"
	"github.com/shifty11/cosmos-gov/ent/lenschaininfo"
	"github.com/shifty11/cosmos-gov/ent/proposal"
	"github.com/shifty11/cosmos-gov/ent/telegramchat"
	"github.com/shifty11/cosmos-gov/ent/user"
	"github.com/shifty11/cosmos-gov/ent/wallet"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chain is the client for interacting with the Chain builders.
	Chain *ChainClient
	// DiscordChannel is the client for interacting with the DiscordChannel builders.
	DiscordChannel *DiscordChannelClient
	// LensChainInfo is the client for interacting with the LensChainInfo builders.
	LensChainInfo *LensChainInfoClient
	// Proposal is the client for interacting with the Proposal builders.
	Proposal *ProposalClient
	// TelegramChat is the client for interacting with the TelegramChat builders.
	TelegramChat *TelegramChatClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Wallet is the client for interacting with the Wallet builders.
	Wallet *WalletClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chain = NewChainClient(c.config)
	c.DiscordChannel = NewDiscordChannelClient(c.config)
	c.LensChainInfo = NewLensChainInfoClient(c.config)
	c.Proposal = NewProposalClient(c.config)
	c.TelegramChat = NewTelegramChatClient(c.config)
	c.User = NewUserClient(c.config)
	c.Wallet = NewWalletClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Chain:          NewChainClient(cfg),
		DiscordChannel: NewDiscordChannelClient(cfg),
		LensChainInfo:  NewLensChainInfoClient(cfg),
		Proposal:       NewProposalClient(cfg),
		TelegramChat:   NewTelegramChatClient(cfg),
		User:           NewUserClient(cfg),
		Wallet:         NewWalletClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Chain:          NewChainClient(cfg),
		DiscordChannel: NewDiscordChannelClient(cfg),
		LensChainInfo:  NewLensChainInfoClient(cfg),
		Proposal:       NewProposalClient(cfg),
		TelegramChat:   NewTelegramChatClient(cfg),
		User:           NewUserClient(cfg),
		Wallet:         NewWalletClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chain.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Chain.Use(hooks...)
	c.DiscordChannel.Use(hooks...)
	c.LensChainInfo.Use(hooks...)
	c.Proposal.Use(hooks...)
	c.TelegramChat.Use(hooks...)
	c.User.Use(hooks...)
	c.Wallet.Use(hooks...)
}

// ChainClient is a client for the Chain schema.
type ChainClient struct {
	config
}

// NewChainClient returns a client for the Chain from the given config.
func NewChainClient(c config) *ChainClient {
	return &ChainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chain.Hooks(f(g(h())))`.
func (c *ChainClient) Use(hooks ...Hook) {
	c.hooks.Chain = append(c.hooks.Chain, hooks...)
}

// Create returns a create builder for Chain.
func (c *ChainClient) Create() *ChainCreate {
	mutation := newChainMutation(c.config, OpCreate)
	return &ChainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chain entities.
func (c *ChainClient) CreateBulk(builders ...*ChainCreate) *ChainCreateBulk {
	return &ChainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chain.
func (c *ChainClient) Update() *ChainUpdate {
	mutation := newChainMutation(c.config, OpUpdate)
	return &ChainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChainClient) UpdateOne(ch *Chain) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChain(ch))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChainClient) UpdateOneID(id int) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChainID(id))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chain.
func (c *ChainClient) Delete() *ChainDelete {
	mutation := newChainMutation(c.config, OpDelete)
	return &ChainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChainClient) DeleteOne(ch *Chain) *ChainDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChainClient) DeleteOneID(id int) *ChainDeleteOne {
	builder := c.Delete().Where(chain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChainDeleteOne{builder}
}

// Query returns a query builder for Chain.
func (c *ChainClient) Query() *ChainQuery {
	return &ChainQuery{
		config: c.config,
	}
}

// Get returns a Chain entity by its id.
func (c *ChainClient) Get(ctx context.Context, id int) (*Chain, error) {
	return c.Query().Where(chain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChainClient) GetX(ctx context.Context, id int) *Chain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Chain.
func (c *ChainClient) QueryUsers(ch *Chain) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, chain.UsersTable, chain.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProposals queries the proposals edge of a Chain.
func (c *ChainClient) QueryProposals(ch *Chain) *ProposalQuery {
	query := &ProposalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(proposal.Table, proposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.ProposalsTable, chain.ProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChainClient) Hooks() []Hook {
	return c.hooks.Chain
}

// DiscordChannelClient is a client for the DiscordChannel schema.
type DiscordChannelClient struct {
	config
}

// NewDiscordChannelClient returns a client for the DiscordChannel from the given config.
func NewDiscordChannelClient(c config) *DiscordChannelClient {
	return &DiscordChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discordchannel.Hooks(f(g(h())))`.
func (c *DiscordChannelClient) Use(hooks ...Hook) {
	c.hooks.DiscordChannel = append(c.hooks.DiscordChannel, hooks...)
}

// Create returns a create builder for DiscordChannel.
func (c *DiscordChannelClient) Create() *DiscordChannelCreate {
	mutation := newDiscordChannelMutation(c.config, OpCreate)
	return &DiscordChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscordChannel entities.
func (c *DiscordChannelClient) CreateBulk(builders ...*DiscordChannelCreate) *DiscordChannelCreateBulk {
	return &DiscordChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscordChannel.
func (c *DiscordChannelClient) Update() *DiscordChannelUpdate {
	mutation := newDiscordChannelMutation(c.config, OpUpdate)
	return &DiscordChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscordChannelClient) UpdateOne(dc *DiscordChannel) *DiscordChannelUpdateOne {
	mutation := newDiscordChannelMutation(c.config, OpUpdateOne, withDiscordChannel(dc))
	return &DiscordChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscordChannelClient) UpdateOneID(id int64) *DiscordChannelUpdateOne {
	mutation := newDiscordChannelMutation(c.config, OpUpdateOne, withDiscordChannelID(id))
	return &DiscordChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscordChannel.
func (c *DiscordChannelClient) Delete() *DiscordChannelDelete {
	mutation := newDiscordChannelMutation(c.config, OpDelete)
	return &DiscordChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiscordChannelClient) DeleteOne(dc *DiscordChannel) *DiscordChannelDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiscordChannelClient) DeleteOneID(id int64) *DiscordChannelDeleteOne {
	builder := c.Delete().Where(discordchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscordChannelDeleteOne{builder}
}

// Query returns a query builder for DiscordChannel.
func (c *DiscordChannelClient) Query() *DiscordChannelQuery {
	return &DiscordChannelQuery{
		config: c.config,
	}
}

// Get returns a DiscordChannel entity by its id.
func (c *DiscordChannelClient) Get(ctx context.Context, id int64) (*DiscordChannel, error) {
	return c.Query().Where(discordchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscordChannelClient) GetX(ctx context.Context, id int64) *DiscordChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a DiscordChannel.
func (c *DiscordChannelClient) QueryUser(dc *DiscordChannel) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, discordchannel.UserTable, discordchannel.UserColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChains queries the chains edge of a DiscordChannel.
func (c *DiscordChannelClient) QueryChains(dc *DiscordChannel) *ChainQuery {
	query := &ChainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discordchannel.ChainsTable, discordchannel.ChainsColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscordChannelClient) Hooks() []Hook {
	return c.hooks.DiscordChannel
}

// LensChainInfoClient is a client for the LensChainInfo schema.
type LensChainInfoClient struct {
	config
}

// NewLensChainInfoClient returns a client for the LensChainInfo from the given config.
func NewLensChainInfoClient(c config) *LensChainInfoClient {
	return &LensChainInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lenschaininfo.Hooks(f(g(h())))`.
func (c *LensChainInfoClient) Use(hooks ...Hook) {
	c.hooks.LensChainInfo = append(c.hooks.LensChainInfo, hooks...)
}

// Create returns a create builder for LensChainInfo.
func (c *LensChainInfoClient) Create() *LensChainInfoCreate {
	mutation := newLensChainInfoMutation(c.config, OpCreate)
	return &LensChainInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LensChainInfo entities.
func (c *LensChainInfoClient) CreateBulk(builders ...*LensChainInfoCreate) *LensChainInfoCreateBulk {
	return &LensChainInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LensChainInfo.
func (c *LensChainInfoClient) Update() *LensChainInfoUpdate {
	mutation := newLensChainInfoMutation(c.config, OpUpdate)
	return &LensChainInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LensChainInfoClient) UpdateOne(lci *LensChainInfo) *LensChainInfoUpdateOne {
	mutation := newLensChainInfoMutation(c.config, OpUpdateOne, withLensChainInfo(lci))
	return &LensChainInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LensChainInfoClient) UpdateOneID(id int) *LensChainInfoUpdateOne {
	mutation := newLensChainInfoMutation(c.config, OpUpdateOne, withLensChainInfoID(id))
	return &LensChainInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LensChainInfo.
func (c *LensChainInfoClient) Delete() *LensChainInfoDelete {
	mutation := newLensChainInfoMutation(c.config, OpDelete)
	return &LensChainInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LensChainInfoClient) DeleteOne(lci *LensChainInfo) *LensChainInfoDeleteOne {
	return c.DeleteOneID(lci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LensChainInfoClient) DeleteOneID(id int) *LensChainInfoDeleteOne {
	builder := c.Delete().Where(lenschaininfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LensChainInfoDeleteOne{builder}
}

// Query returns a query builder for LensChainInfo.
func (c *LensChainInfoClient) Query() *LensChainInfoQuery {
	return &LensChainInfoQuery{
		config: c.config,
	}
}

// Get returns a LensChainInfo entity by its id.
func (c *LensChainInfoClient) Get(ctx context.Context, id int) (*LensChainInfo, error) {
	return c.Query().Where(lenschaininfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LensChainInfoClient) GetX(ctx context.Context, id int) *LensChainInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LensChainInfoClient) Hooks() []Hook {
	return c.hooks.LensChainInfo
}

// ProposalClient is a client for the Proposal schema.
type ProposalClient struct {
	config
}

// NewProposalClient returns a client for the Proposal from the given config.
func NewProposalClient(c config) *ProposalClient {
	return &ProposalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proposal.Hooks(f(g(h())))`.
func (c *ProposalClient) Use(hooks ...Hook) {
	c.hooks.Proposal = append(c.hooks.Proposal, hooks...)
}

// Create returns a create builder for Proposal.
func (c *ProposalClient) Create() *ProposalCreate {
	mutation := newProposalMutation(c.config, OpCreate)
	return &ProposalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proposal entities.
func (c *ProposalClient) CreateBulk(builders ...*ProposalCreate) *ProposalCreateBulk {
	return &ProposalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proposal.
func (c *ProposalClient) Update() *ProposalUpdate {
	mutation := newProposalMutation(c.config, OpUpdate)
	return &ProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProposalClient) UpdateOne(pr *Proposal) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposal(pr))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProposalClient) UpdateOneID(id int) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposalID(id))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proposal.
func (c *ProposalClient) Delete() *ProposalDelete {
	mutation := newProposalMutation(c.config, OpDelete)
	return &ProposalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProposalClient) DeleteOne(pr *Proposal) *ProposalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProposalClient) DeleteOneID(id int) *ProposalDeleteOne {
	builder := c.Delete().Where(proposal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProposalDeleteOne{builder}
}

// Query returns a query builder for Proposal.
func (c *ProposalClient) Query() *ProposalQuery {
	return &ProposalQuery{
		config: c.config,
	}
}

// Get returns a Proposal entity by its id.
func (c *ProposalClient) Get(ctx context.Context, id int) (*Proposal, error) {
	return c.Query().Where(proposal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProposalClient) GetX(ctx context.Context, id int) *Proposal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a Proposal.
func (c *ProposalClient) QueryChain(pr *Proposal) *ChainQuery {
	query := &ChainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proposal.Table, proposal.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proposal.ChainTable, proposal.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProposalClient) Hooks() []Hook {
	return c.hooks.Proposal
}

// TelegramChatClient is a client for the TelegramChat schema.
type TelegramChatClient struct {
	config
}

// NewTelegramChatClient returns a client for the TelegramChat from the given config.
func NewTelegramChatClient(c config) *TelegramChatClient {
	return &TelegramChatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telegramchat.Hooks(f(g(h())))`.
func (c *TelegramChatClient) Use(hooks ...Hook) {
	c.hooks.TelegramChat = append(c.hooks.TelegramChat, hooks...)
}

// Create returns a create builder for TelegramChat.
func (c *TelegramChatClient) Create() *TelegramChatCreate {
	mutation := newTelegramChatMutation(c.config, OpCreate)
	return &TelegramChatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelegramChat entities.
func (c *TelegramChatClient) CreateBulk(builders ...*TelegramChatCreate) *TelegramChatCreateBulk {
	return &TelegramChatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelegramChat.
func (c *TelegramChatClient) Update() *TelegramChatUpdate {
	mutation := newTelegramChatMutation(c.config, OpUpdate)
	return &TelegramChatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelegramChatClient) UpdateOne(tc *TelegramChat) *TelegramChatUpdateOne {
	mutation := newTelegramChatMutation(c.config, OpUpdateOne, withTelegramChat(tc))
	return &TelegramChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelegramChatClient) UpdateOneID(id int64) *TelegramChatUpdateOne {
	mutation := newTelegramChatMutation(c.config, OpUpdateOne, withTelegramChatID(id))
	return &TelegramChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelegramChat.
func (c *TelegramChatClient) Delete() *TelegramChatDelete {
	mutation := newTelegramChatMutation(c.config, OpDelete)
	return &TelegramChatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TelegramChatClient) DeleteOne(tc *TelegramChat) *TelegramChatDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TelegramChatClient) DeleteOneID(id int64) *TelegramChatDeleteOne {
	builder := c.Delete().Where(telegramchat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelegramChatDeleteOne{builder}
}

// Query returns a query builder for TelegramChat.
func (c *TelegramChatClient) Query() *TelegramChatQuery {
	return &TelegramChatQuery{
		config: c.config,
	}
}

// Get returns a TelegramChat entity by its id.
func (c *TelegramChatClient) Get(ctx context.Context, id int64) (*TelegramChat, error) {
	return c.Query().Where(telegramchat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelegramChatClient) GetX(ctx context.Context, id int64) *TelegramChat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a TelegramChat.
func (c *TelegramChatClient) QueryUser(tc *TelegramChat) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchat.Table, telegramchat.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, telegramchat.UserTable, telegramchat.UserColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChains queries the chains edge of a TelegramChat.
func (c *TelegramChatClient) QueryChains(tc *TelegramChat) *ChainQuery {
	query := &ChainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchat.Table, telegramchat.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, telegramchat.ChainsTable, telegramchat.ChainsColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TelegramChatClient) Hooks() []Hook {
	return c.hooks.TelegramChat
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChains queries the chains edge of a User.
func (c *UserClient) QueryChains(u *User) *ChainQuery {
	query := &ChainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ChainsTable, user.ChainsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTelegramChats queries the telegram_chats edge of a User.
func (c *UserClient) QueryTelegramChats(u *User) *TelegramChatQuery {
	query := &TelegramChatQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(telegramchat.Table, telegramchat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.TelegramChatsTable, user.TelegramChatsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscordChannels queries the discord_channels edge of a User.
func (c *UserClient) QueryDiscordChannels(u *User) *DiscordChannelQuery {
	query := &DiscordChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(discordchannel.Table, discordchannel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.DiscordChannelsTable, user.DiscordChannelsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWallets queries the wallets edge of a User.
func (c *UserClient) QueryWallets(u *User) *WalletQuery {
	query := &WalletQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.WalletsTable, user.WalletsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// WalletClient is a client for the Wallet schema.
type WalletClient struct {
	config
}

// NewWalletClient returns a client for the Wallet from the given config.
func NewWalletClient(c config) *WalletClient {
	return &WalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wallet.Hooks(f(g(h())))`.
func (c *WalletClient) Use(hooks ...Hook) {
	c.hooks.Wallet = append(c.hooks.Wallet, hooks...)
}

// Create returns a create builder for Wallet.
func (c *WalletClient) Create() *WalletCreate {
	mutation := newWalletMutation(c.config, OpCreate)
	return &WalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Wallet entities.
func (c *WalletClient) CreateBulk(builders ...*WalletCreate) *WalletCreateBulk {
	return &WalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Wallet.
func (c *WalletClient) Update() *WalletUpdate {
	mutation := newWalletMutation(c.config, OpUpdate)
	return &WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WalletClient) UpdateOne(w *Wallet) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWallet(w))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WalletClient) UpdateOneID(id int) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWalletID(id))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wallet.
func (c *WalletClient) Delete() *WalletDelete {
	mutation := newWalletMutation(c.config, OpDelete)
	return &WalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WalletClient) DeleteOne(w *Wallet) *WalletDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WalletClient) DeleteOneID(id int) *WalletDeleteOne {
	builder := c.Delete().Where(wallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WalletDeleteOne{builder}
}

// Query returns a query builder for Wallet.
func (c *WalletClient) Query() *WalletQuery {
	return &WalletQuery{
		config: c.config,
	}
}

// Get returns a Wallet entity by its id.
func (c *WalletClient) Get(ctx context.Context, id int) (*Wallet, error) {
	return c.Query().Where(wallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WalletClient) GetX(ctx context.Context, id int) *Wallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Wallet.
func (c *WalletClient) QueryUsers(w *Wallet) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wallet.Table, wallet.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, wallet.UsersTable, wallet.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChains queries the chains edge of a Wallet.
func (c *WalletClient) QueryChains(w *Wallet) *ChainQuery {
	query := &ChainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wallet.Table, wallet.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, wallet.ChainsTable, wallet.ChainsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WalletClient) Hooks() []Hook {
	return c.hooks.Wallet
}
