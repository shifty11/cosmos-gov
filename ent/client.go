// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/shifty11/cosmos-gov/ent/migrate"

	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/proposal"
	"github.com/shifty11/cosmos-gov/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chain is the client for interacting with the Chain builders.
	Chain *ChainClient
	// Proposal is the client for interacting with the Proposal builders.
	Proposal *ProposalClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chain = NewChainClient(c.config)
	c.Proposal = NewProposalClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Chain:    NewChainClient(cfg),
		Proposal: NewProposalClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Chain:    NewChainClient(cfg),
		Proposal: NewProposalClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chain.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Chain.Use(hooks...)
	c.Proposal.Use(hooks...)
	c.User.Use(hooks...)
}

// ChainClient is a client for the Chain schema.
type ChainClient struct {
	config
}

// NewChainClient returns a client for the Chain from the given config.
func NewChainClient(c config) *ChainClient {
	return &ChainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chain.Hooks(f(g(h())))`.
func (c *ChainClient) Use(hooks ...Hook) {
	c.hooks.Chain = append(c.hooks.Chain, hooks...)
}

// Create returns a create builder for Chain.
func (c *ChainClient) Create() *ChainCreate {
	mutation := newChainMutation(c.config, OpCreate)
	return &ChainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chain entities.
func (c *ChainClient) CreateBulk(builders ...*ChainCreate) *ChainCreateBulk {
	return &ChainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chain.
func (c *ChainClient) Update() *ChainUpdate {
	mutation := newChainMutation(c.config, OpUpdate)
	return &ChainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChainClient) UpdateOne(ch *Chain) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChain(ch))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChainClient) UpdateOneID(id int) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChainID(id))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chain.
func (c *ChainClient) Delete() *ChainDelete {
	mutation := newChainMutation(c.config, OpDelete)
	return &ChainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChainClient) DeleteOne(ch *Chain) *ChainDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChainClient) DeleteOneID(id int) *ChainDeleteOne {
	builder := c.Delete().Where(chain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChainDeleteOne{builder}
}

// Query returns a query builder for Chain.
func (c *ChainClient) Query() *ChainQuery {
	return &ChainQuery{
		config: c.config,
	}
}

// Get returns a Chain entity by its id.
func (c *ChainClient) Get(ctx context.Context, id int) (*Chain, error) {
	return c.Query().Where(chain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChainClient) GetX(ctx context.Context, id int) *Chain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Chain.
func (c *ChainClient) QueryUsers(ch *Chain) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, chain.UsersTable, chain.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProposals queries the proposals edge of a Chain.
func (c *ChainClient) QueryProposals(ch *Chain) *ProposalQuery {
	query := &ProposalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(proposal.Table, proposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.ProposalsTable, chain.ProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChainClient) Hooks() []Hook {
	return c.hooks.Chain
}

// ProposalClient is a client for the Proposal schema.
type ProposalClient struct {
	config
}

// NewProposalClient returns a client for the Proposal from the given config.
func NewProposalClient(c config) *ProposalClient {
	return &ProposalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proposal.Hooks(f(g(h())))`.
func (c *ProposalClient) Use(hooks ...Hook) {
	c.hooks.Proposal = append(c.hooks.Proposal, hooks...)
}

// Create returns a create builder for Proposal.
func (c *ProposalClient) Create() *ProposalCreate {
	mutation := newProposalMutation(c.config, OpCreate)
	return &ProposalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proposal entities.
func (c *ProposalClient) CreateBulk(builders ...*ProposalCreate) *ProposalCreateBulk {
	return &ProposalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proposal.
func (c *ProposalClient) Update() *ProposalUpdate {
	mutation := newProposalMutation(c.config, OpUpdate)
	return &ProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProposalClient) UpdateOne(pr *Proposal) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposal(pr))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProposalClient) UpdateOneID(id int) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposalID(id))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proposal.
func (c *ProposalClient) Delete() *ProposalDelete {
	mutation := newProposalMutation(c.config, OpDelete)
	return &ProposalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProposalClient) DeleteOne(pr *Proposal) *ProposalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProposalClient) DeleteOneID(id int) *ProposalDeleteOne {
	builder := c.Delete().Where(proposal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProposalDeleteOne{builder}
}

// Query returns a query builder for Proposal.
func (c *ProposalClient) Query() *ProposalQuery {
	return &ProposalQuery{
		config: c.config,
	}
}

// Get returns a Proposal entity by its id.
func (c *ProposalClient) Get(ctx context.Context, id int) (*Proposal, error) {
	return c.Query().Where(proposal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProposalClient) GetX(ctx context.Context, id int) *Proposal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a Proposal.
func (c *ProposalClient) QueryChain(pr *Proposal) *ChainQuery {
	query := &ChainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proposal.Table, proposal.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proposal.ChainTable, proposal.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProposalClient) Hooks() []Hook {
	return c.hooks.Proposal
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChains queries the chains edge of a User.
func (c *UserClient) QueryChains(u *User) *ChainQuery {
	query := &ChainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ChainsTable, user.ChainsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
