// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-gov/ent/grant"
	"github.com/shifty11/cosmos-gov/ent/predicate"
	"github.com/shifty11/cosmos-gov/ent/wallet"
)

// GrantUpdate is the builder for updating Grant entities.
type GrantUpdate struct {
	config
	hooks    []Hook
	mutation *GrantMutation
}

// Where appends a list predicates to the GrantUpdate builder.
func (gu *GrantUpdate) Where(ps ...predicate.Grant) *GrantUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdateTime sets the "update_time" field.
func (gu *GrantUpdate) SetUpdateTime(t time.Time) *GrantUpdate {
	gu.mutation.SetUpdateTime(t)
	return gu
}

// SetGrantee sets the "grantee" field.
func (gu *GrantUpdate) SetGrantee(s string) *GrantUpdate {
	gu.mutation.SetGrantee(s)
	return gu
}

// SetType sets the "type" field.
func (gu *GrantUpdate) SetType(s string) *GrantUpdate {
	gu.mutation.SetType(s)
	return gu
}

// SetExpiresAt sets the "expires_at" field.
func (gu *GrantUpdate) SetExpiresAt(t time.Time) *GrantUpdate {
	gu.mutation.SetExpiresAt(t)
	return gu
}

// SetGranterID sets the "granter" edge to the Wallet entity by ID.
func (gu *GrantUpdate) SetGranterID(id int) *GrantUpdate {
	gu.mutation.SetGranterID(id)
	return gu
}

// SetNillableGranterID sets the "granter" edge to the Wallet entity by ID if the given value is not nil.
func (gu *GrantUpdate) SetNillableGranterID(id *int) *GrantUpdate {
	if id != nil {
		gu = gu.SetGranterID(*id)
	}
	return gu
}

// SetGranter sets the "granter" edge to the Wallet entity.
func (gu *GrantUpdate) SetGranter(w *Wallet) *GrantUpdate {
	return gu.SetGranterID(w.ID)
}

// Mutation returns the GrantMutation object of the builder.
func (gu *GrantUpdate) Mutation() *GrantMutation {
	return gu.mutation
}

// ClearGranter clears the "granter" edge to the Wallet entity.
func (gu *GrantUpdate) ClearGranter() *GrantUpdate {
	gu.mutation.ClearGranter()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GrantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gu.defaults()
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GrantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GrantUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GrantUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GrantUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GrantUpdate) defaults() {
	if _, ok := gu.mutation.UpdateTime(); !ok {
		v := grant.UpdateDefaultUpdateTime()
		gu.mutation.SetUpdateTime(v)
	}
}

func (gu *GrantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   grant.Table,
			Columns: grant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grant.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldUpdateTime,
		})
	}
	if value, ok := gu.mutation.Grantee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldGrantee,
		})
	}
	if value, ok := gu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldType,
		})
	}
	if value, ok := gu.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldExpiresAt,
		})
	}
	if gu.mutation.GranterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.GranterTable,
			Columns: []string{grant.GranterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GranterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.GranterTable,
			Columns: []string{grant.GranterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GrantUpdateOne is the builder for updating a single Grant entity.
type GrantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantMutation
}

// SetUpdateTime sets the "update_time" field.
func (guo *GrantUpdateOne) SetUpdateTime(t time.Time) *GrantUpdateOne {
	guo.mutation.SetUpdateTime(t)
	return guo
}

// SetGrantee sets the "grantee" field.
func (guo *GrantUpdateOne) SetGrantee(s string) *GrantUpdateOne {
	guo.mutation.SetGrantee(s)
	return guo
}

// SetType sets the "type" field.
func (guo *GrantUpdateOne) SetType(s string) *GrantUpdateOne {
	guo.mutation.SetType(s)
	return guo
}

// SetExpiresAt sets the "expires_at" field.
func (guo *GrantUpdateOne) SetExpiresAt(t time.Time) *GrantUpdateOne {
	guo.mutation.SetExpiresAt(t)
	return guo
}

// SetGranterID sets the "granter" edge to the Wallet entity by ID.
func (guo *GrantUpdateOne) SetGranterID(id int) *GrantUpdateOne {
	guo.mutation.SetGranterID(id)
	return guo
}

// SetNillableGranterID sets the "granter" edge to the Wallet entity by ID if the given value is not nil.
func (guo *GrantUpdateOne) SetNillableGranterID(id *int) *GrantUpdateOne {
	if id != nil {
		guo = guo.SetGranterID(*id)
	}
	return guo
}

// SetGranter sets the "granter" edge to the Wallet entity.
func (guo *GrantUpdateOne) SetGranter(w *Wallet) *GrantUpdateOne {
	return guo.SetGranterID(w.ID)
}

// Mutation returns the GrantMutation object of the builder.
func (guo *GrantUpdateOne) Mutation() *GrantMutation {
	return guo.mutation
}

// ClearGranter clears the "granter" edge to the Wallet entity.
func (guo *GrantUpdateOne) ClearGranter() *GrantUpdateOne {
	guo.mutation.ClearGranter()
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GrantUpdateOne) Select(field string, fields ...string) *GrantUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Grant entity.
func (guo *GrantUpdateOne) Save(ctx context.Context) (*Grant, error) {
	var (
		err  error
		node *Grant
	)
	guo.defaults()
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GrantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GrantUpdateOne) SaveX(ctx context.Context) *Grant {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GrantUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GrantUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GrantUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdateTime(); !ok {
		v := grant.UpdateDefaultUpdateTime()
		guo.mutation.SetUpdateTime(v)
	}
}

func (guo *GrantUpdateOne) sqlSave(ctx context.Context) (_node *Grant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   grant.Table,
			Columns: grant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grant.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Grant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grant.FieldID)
		for _, f := range fields {
			if !grant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldUpdateTime,
		})
	}
	if value, ok := guo.mutation.Grantee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldGrantee,
		})
	}
	if value, ok := guo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldType,
		})
	}
	if value, ok := guo.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldExpiresAt,
		})
	}
	if guo.mutation.GranterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.GranterTable,
			Columns: []string{grant.GranterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GranterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.GranterTable,
			Columns: []string{grant.GranterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Grant{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
