// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/draftproposal"
)

// DraftProposal is the model entity for the DraftProposal schema.
type DraftProposal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DraftProposalID holds the value of the "draft_proposal_id" field.
	DraftProposalID int64 `json:"draft_proposal_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DraftProposalQuery when eager-loading is set.
	Edges                 DraftProposalEdges `json:"edges"`
	chain_draft_proposals *int
}

// DraftProposalEdges holds the relations/edges for other nodes in the graph.
type DraftProposalEdges struct {
	// Chain holds the value of the chain edge.
	Chain *Chain `json:"chain,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChainOrErr returns the Chain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DraftProposalEdges) ChainOrErr() (*Chain, error) {
	if e.loadedTypes[0] {
		if e.Chain == nil {
			// The edge chain was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: chain.Label}
		}
		return e.Chain, nil
	}
	return nil, &NotLoadedError{edge: "chain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DraftProposal) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case draftproposal.FieldID, draftproposal.FieldDraftProposalID:
			values[i] = new(sql.NullInt64)
		case draftproposal.FieldTitle, draftproposal.FieldURL:
			values[i] = new(sql.NullString)
		case draftproposal.FieldCreateTime, draftproposal.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case draftproposal.ForeignKeys[0]: // chain_draft_proposals
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DraftProposal", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DraftProposal fields.
func (dp *DraftProposal) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case draftproposal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = int(value.Int64)
		case draftproposal.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dp.CreateTime = value.Time
			}
		case draftproposal.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dp.UpdateTime = value.Time
			}
		case draftproposal.FieldDraftProposalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field draft_proposal_id", values[i])
			} else if value.Valid {
				dp.DraftProposalID = value.Int64
			}
		case draftproposal.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				dp.Title = value.String
			}
		case draftproposal.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				dp.URL = value.String
			}
		case draftproposal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chain_draft_proposals", value)
			} else if value.Valid {
				dp.chain_draft_proposals = new(int)
				*dp.chain_draft_proposals = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChain queries the "chain" edge of the DraftProposal entity.
func (dp *DraftProposal) QueryChain() *ChainQuery {
	return (&DraftProposalClient{config: dp.config}).QueryChain(dp)
}

// Update returns a builder for updating this DraftProposal.
// Note that you need to call DraftProposal.Unwrap() before calling this method if this DraftProposal
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DraftProposal) Update() *DraftProposalUpdateOne {
	return (&DraftProposalClient{config: dp.config}).UpdateOne(dp)
}

// Unwrap unwraps the DraftProposal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DraftProposal) Unwrap() *DraftProposal {
	tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DraftProposal is not a transactional entity")
	}
	dp.config.driver = tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DraftProposal) String() string {
	var builder strings.Builder
	builder.WriteString("DraftProposal(")
	builder.WriteString(fmt.Sprintf("id=%v", dp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(dp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(dp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", draft_proposal_id=")
	builder.WriteString(fmt.Sprintf("%v", dp.DraftProposalID))
	builder.WriteString(", title=")
	builder.WriteString(dp.Title)
	builder.WriteString(", url=")
	builder.WriteString(dp.URL)
	builder.WriteByte(')')
	return builder.String()
}

// DraftProposals is a parsable slice of DraftProposal.
type DraftProposals []*DraftProposal

func (dp DraftProposals) config(cfg config) {
	for _i := range dp {
		dp[_i].config = cfg
	}
}
