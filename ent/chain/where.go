// Code generated by entc, DO NOT EDIT.

package chain

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shifty11/cosmos-gov/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// AccountPrefix applies equality check predicate on the "account_prefix" field. It's identical to AccountPrefixEQ.
func AccountPrefix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountPrefix), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnabled), v))
	})
}

// IsVotingEnabled applies equality check predicate on the "is_voting_enabled" field. It's identical to IsVotingEnabledEQ.
func IsVotingEnabled(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVotingEnabled), v))
	})
}

// IsFeegrantUsed applies equality check predicate on the "is_feegrant_used" field. It's identical to IsFeegrantUsedEQ.
func IsFeegrantUsed(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFeegrantUsed), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainID), v))
	})
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChainID), v...))
	})
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChainID), v...))
	})
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainID), v))
	})
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainID), v))
	})
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainID), v))
	})
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainID), v))
	})
}

// ChainIDContains applies the Contains predicate on the "chain_id" field.
func ChainIDContains(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainID), v))
	})
}

// ChainIDHasPrefix applies the HasPrefix predicate on the "chain_id" field.
func ChainIDHasPrefix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainID), v))
	})
}

// ChainIDHasSuffix applies the HasSuffix predicate on the "chain_id" field.
func ChainIDHasSuffix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainID), v))
	})
}

// ChainIDEqualFold applies the EqualFold predicate on the "chain_id" field.
func ChainIDEqualFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainID), v))
	})
}

// ChainIDContainsFold applies the ContainsFold predicate on the "chain_id" field.
func ChainIDContainsFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainID), v))
	})
}

// AccountPrefixEQ applies the EQ predicate on the "account_prefix" field.
func AccountPrefixEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixNEQ applies the NEQ predicate on the "account_prefix" field.
func AccountPrefixNEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixIn applies the In predicate on the "account_prefix" field.
func AccountPrefixIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountPrefix), v...))
	})
}

// AccountPrefixNotIn applies the NotIn predicate on the "account_prefix" field.
func AccountPrefixNotIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountPrefix), v...))
	})
}

// AccountPrefixGT applies the GT predicate on the "account_prefix" field.
func AccountPrefixGT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixGTE applies the GTE predicate on the "account_prefix" field.
func AccountPrefixGTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixLT applies the LT predicate on the "account_prefix" field.
func AccountPrefixLT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixLTE applies the LTE predicate on the "account_prefix" field.
func AccountPrefixLTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixContains applies the Contains predicate on the "account_prefix" field.
func AccountPrefixContains(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixHasPrefix applies the HasPrefix predicate on the "account_prefix" field.
func AccountPrefixHasPrefix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixHasSuffix applies the HasSuffix predicate on the "account_prefix" field.
func AccountPrefixHasSuffix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixEqualFold applies the EqualFold predicate on the "account_prefix" field.
func AccountPrefixEqualFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountPrefix), v))
	})
}

// AccountPrefixContainsFold applies the ContainsFold predicate on the "account_prefix" field.
func AccountPrefixContainsFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountPrefix), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Chain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEnabled), v))
	})
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsEnabled), v))
	})
}

// IsVotingEnabledEQ applies the EQ predicate on the "is_voting_enabled" field.
func IsVotingEnabledEQ(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVotingEnabled), v))
	})
}

// IsVotingEnabledNEQ applies the NEQ predicate on the "is_voting_enabled" field.
func IsVotingEnabledNEQ(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsVotingEnabled), v))
	})
}

// IsFeegrantUsedEQ applies the EQ predicate on the "is_feegrant_used" field.
func IsFeegrantUsedEQ(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFeegrantUsed), v))
	})
}

// IsFeegrantUsedNEQ applies the NEQ predicate on the "is_feegrant_used" field.
func IsFeegrantUsedNEQ(v bool) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFeegrantUsed), v))
	})
}

// HasProposals applies the HasEdge predicate on the "proposals" edge.
func HasProposals() predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProposalsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProposalsTable, ProposalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProposalsWith applies the HasEdge predicate on the "proposals" edge with a given conditions (other predicates).
func HasProposalsWith(preds ...predicate.Proposal) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProposalsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProposalsTable, ProposalsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDraftProposals applies the HasEdge predicate on the "draft_proposals" edge.
func HasDraftProposals() predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DraftProposalsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DraftProposalsTable, DraftProposalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDraftProposalsWith applies the HasEdge predicate on the "draft_proposals" edge with a given conditions (other predicates).
func HasDraftProposalsWith(preds ...predicate.DraftProposal) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DraftProposalsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DraftProposalsTable, DraftProposalsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTelegramChats applies the HasEdge predicate on the "telegram_chats" edge.
func HasTelegramChats() predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TelegramChatsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TelegramChatsTable, TelegramChatsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTelegramChatsWith applies the HasEdge predicate on the "telegram_chats" edge with a given conditions (other predicates).
func HasTelegramChatsWith(preds ...predicate.TelegramChat) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TelegramChatsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TelegramChatsTable, TelegramChatsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscordChannels applies the HasEdge predicate on the "discord_channels" edge.
func HasDiscordChannels() predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiscordChannelsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DiscordChannelsTable, DiscordChannelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscordChannelsWith applies the HasEdge predicate on the "discord_channels" edge with a given conditions (other predicates).
func HasDiscordChannelsWith(preds ...predicate.DiscordChannel) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiscordChannelsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DiscordChannelsTable, DiscordChannelsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRPCEndpoints applies the HasEdge predicate on the "rpc_endpoints" edge.
func HasRPCEndpoints() predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RPCEndpointsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RPCEndpointsTable, RPCEndpointsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRPCEndpointsWith applies the HasEdge predicate on the "rpc_endpoints" edge with a given conditions (other predicates).
func HasRPCEndpointsWith(preds ...predicate.RpcEndpoint) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RPCEndpointsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RPCEndpointsTable, RPCEndpointsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWallets applies the HasEdge predicate on the "wallets" edge.
func HasWallets() predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WalletsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WalletsTable, WalletsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWalletsWith applies the HasEdge predicate on the "wallets" edge with a given conditions (other predicates).
func HasWalletsWith(preds ...predicate.Wallet) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WalletsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WalletsTable, WalletsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chain) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chain) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chain) predicate.Chain {
	return predicate.Chain(func(s *sql.Selector) {
		p(s.Not())
	})
}
