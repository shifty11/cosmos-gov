// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/cosmos-gov/ent/telegramchat"
	"github.com/shifty11/cosmos-gov/ent/user"
)

// TelegramChat is the model entity for the TelegramChat schema.
type TelegramChat struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IsGroup holds the value of the "is_group" field.
	IsGroup bool `json:"is_group,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TelegramChatQuery when eager-loading is set.
	Edges              TelegramChatEdges `json:"edges"`
	telegram_chat_user *int64
}

// TelegramChatEdges holds the relations/edges for other nodes in the graph.
type TelegramChatEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Chains holds the value of the chains edge.
	Chains []*Chain `json:"chains,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelegramChatEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ChainsOrErr returns the Chains value or an error if the edge
// was not loaded in eager-loading.
func (e TelegramChatEdges) ChainsOrErr() ([]*Chain, error) {
	if e.loadedTypes[1] {
		return e.Chains, nil
	}
	return nil, &NotLoadedError{edge: "chains"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramChat) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramchat.FieldIsGroup:
			values[i] = new(sql.NullBool)
		case telegramchat.FieldID:
			values[i] = new(sql.NullInt64)
		case telegramchat.FieldName:
			values[i] = new(sql.NullString)
		case telegramchat.FieldCreatedAt, telegramchat.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case telegramchat.ForeignKeys[0]: // telegram_chat_user
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TelegramChat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramChat fields.
func (tc *TelegramChat) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramchat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int64(value.Int64)
		case telegramchat.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = value.Time
			}
		case telegramchat.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = value.Time
			}
		case telegramchat.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tc.Name = value.String
			}
		case telegramchat.FieldIsGroup:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_group", values[i])
			} else if value.Valid {
				tc.IsGroup = value.Bool
			}
		case telegramchat.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field telegram_chat_user", value)
			} else if value.Valid {
				tc.telegram_chat_user = new(int64)
				*tc.telegram_chat_user = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the TelegramChat entity.
func (tc *TelegramChat) QueryUser() *UserQuery {
	return (&TelegramChatClient{config: tc.config}).QueryUser(tc)
}

// QueryChains queries the "chains" edge of the TelegramChat entity.
func (tc *TelegramChat) QueryChains() *ChainQuery {
	return (&TelegramChatClient{config: tc.config}).QueryChains(tc)
}

// Update returns a builder for updating this TelegramChat.
// Note that you need to call TelegramChat.Unwrap() before calling this method if this TelegramChat
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TelegramChat) Update() *TelegramChatUpdateOne {
	return (&TelegramChatClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TelegramChat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TelegramChat) Unwrap() *TelegramChat {
	tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramChat is not a transactional entity")
	}
	tc.config.driver = tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TelegramChat) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramChat(")
	builder.WriteString(fmt.Sprintf("id=%v", tc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(tc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(tc.Name)
	builder.WriteString(", is_group=")
	builder.WriteString(fmt.Sprintf("%v", tc.IsGroup))
	builder.WriteByte(')')
	return builder.String()
}

// TelegramChats is a parsable slice of TelegramChat.
type TelegramChats []*TelegramChat

func (tc TelegramChats) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
