// Code generated by entc, DO NOT EDIT.

package discordchannel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shifty11/cosmos-gov/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// IsGroup applies equality check predicate on the "is_group" field. It's identical to IsGroupEQ.
func IsGroup(v bool) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsGroup), v))
	})
}

// Roles applies equality check predicate on the "roles" field. It's identical to RolesEQ.
func Roles(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoles), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// IsGroupEQ applies the EQ predicate on the "is_group" field.
func IsGroupEQ(v bool) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsGroup), v))
	})
}

// IsGroupNEQ applies the NEQ predicate on the "is_group" field.
func IsGroupNEQ(v bool) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsGroup), v))
	})
}

// RolesEQ applies the EQ predicate on the "roles" field.
func RolesEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoles), v))
	})
}

// RolesNEQ applies the NEQ predicate on the "roles" field.
func RolesNEQ(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoles), v))
	})
}

// RolesIn applies the In predicate on the "roles" field.
func RolesIn(vs ...string) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoles), v...))
	})
}

// RolesNotIn applies the NotIn predicate on the "roles" field.
func RolesNotIn(vs ...string) predicate.DiscordChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoles), v...))
	})
}

// RolesGT applies the GT predicate on the "roles" field.
func RolesGT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoles), v))
	})
}

// RolesGTE applies the GTE predicate on the "roles" field.
func RolesGTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoles), v))
	})
}

// RolesLT applies the LT predicate on the "roles" field.
func RolesLT(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoles), v))
	})
}

// RolesLTE applies the LTE predicate on the "roles" field.
func RolesLTE(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoles), v))
	})
}

// RolesContains applies the Contains predicate on the "roles" field.
func RolesContains(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoles), v))
	})
}

// RolesHasPrefix applies the HasPrefix predicate on the "roles" field.
func RolesHasPrefix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoles), v))
	})
}

// RolesHasSuffix applies the HasSuffix predicate on the "roles" field.
func RolesHasSuffix(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoles), v))
	})
}

// RolesEqualFold applies the EqualFold predicate on the "roles" field.
func RolesEqualFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoles), v))
	})
}

// RolesContainsFold applies the ContainsFold predicate on the "roles" field.
func RolesContainsFold(v string) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoles), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChains applies the HasEdge predicate on the "chains" edge.
func HasChains() predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChainsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChainsTable, ChainsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChainsWith applies the HasEdge predicate on the "chains" edge with a given conditions (other predicates).
func HasChainsWith(preds ...predicate.Chain) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChainsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChainsTable, ChainsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscordChannel) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscordChannel) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscordChannel) predicate.DiscordChannel {
	return predicate.DiscordChannel(func(s *sql.Selector) {
		p(s.Not())
	})
}
