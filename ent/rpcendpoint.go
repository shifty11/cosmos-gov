// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/rpcendpoint"
)

// RpcEndpoint is the model entity for the RpcEndpoint schema.
type RpcEndpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdatedTime holds the value of the "updated_time" field.
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RpcEndpointQuery when eager-loading is set.
	Edges               RpcEndpointEdges `json:"edges"`
	chain_rpc_endpoints *int
}

// RpcEndpointEdges holds the relations/edges for other nodes in the graph.
type RpcEndpointEdges struct {
	// Chain holds the value of the chain edge.
	Chain *Chain `json:"chain,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChainOrErr returns the Chain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RpcEndpointEdges) ChainOrErr() (*Chain, error) {
	if e.loadedTypes[0] {
		if e.Chain == nil {
			// The edge chain was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: chain.Label}
		}
		return e.Chain, nil
	}
	return nil, &NotLoadedError{edge: "chain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RpcEndpoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rpcendpoint.FieldID:
			values[i] = new(sql.NullInt64)
		case rpcendpoint.FieldEndpoint:
			values[i] = new(sql.NullString)
		case rpcendpoint.FieldCreateTime, rpcendpoint.FieldUpdatedTime, rpcendpoint.FieldCreatedAt, rpcendpoint.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case rpcendpoint.ForeignKeys[0]: // chain_rpc_endpoints
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RpcEndpoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RpcEndpoint fields.
func (re *RpcEndpoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rpcendpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			re.ID = int(value.Int64)
		case rpcendpoint.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				re.CreateTime = value.Time
			}
		case rpcendpoint.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				re.UpdatedTime = value.Time
			}
		case rpcendpoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				re.CreatedAt = value.Time
			}
		case rpcendpoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				re.UpdatedAt = value.Time
			}
		case rpcendpoint.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				re.Endpoint = value.String
			}
		case rpcendpoint.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chain_rpc_endpoints", value)
			} else if value.Valid {
				re.chain_rpc_endpoints = new(int)
				*re.chain_rpc_endpoints = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChain queries the "chain" edge of the RpcEndpoint entity.
func (re *RpcEndpoint) QueryChain() *ChainQuery {
	return (&RpcEndpointClient{config: re.config}).QueryChain(re)
}

// Update returns a builder for updating this RpcEndpoint.
// Note that you need to call RpcEndpoint.Unwrap() before calling this method if this RpcEndpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *RpcEndpoint) Update() *RpcEndpointUpdateOne {
	return (&RpcEndpointClient{config: re.config}).UpdateOne(re)
}

// Unwrap unwraps the RpcEndpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (re *RpcEndpoint) Unwrap() *RpcEndpoint {
	tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("ent: RpcEndpoint is not a transactional entity")
	}
	re.config.driver = tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *RpcEndpoint) String() string {
	var builder strings.Builder
	builder.WriteString("RpcEndpoint(")
	builder.WriteString(fmt.Sprintf("id=%v", re.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(re.CreateTime.Format(time.ANSIC))
	builder.WriteString(", updated_time=")
	builder.WriteString(re.UpdatedTime.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(re.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(re.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", endpoint=")
	builder.WriteString(re.Endpoint)
	builder.WriteByte(')')
	return builder.String()
}

// RpcEndpoints is a parsable slice of RpcEndpoint.
type RpcEndpoints []*RpcEndpoint

func (re RpcEndpoints) config(cfg config) {
	for _i := range re {
		re[_i].config = cfg
	}
}
