// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldChatID holds the string denoting the chat_id field in the database.
	FieldChatID = "chat_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldChatName holds the string denoting the chat_name field in the database.
	FieldChatName = "chat_name"
	// FieldIsGroup holds the string denoting the is_group field in the database.
	FieldIsGroup = "is_group"
	// EdgeChains holds the string denoting the chains edge name in mutations.
	EdgeChains = "chains"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ChainsTable is the table that holds the chains relation/edge. The primary key declared below.
	ChainsTable = "user_chains"
	// ChainsInverseTable is the table name for the Chain entity.
	// It exists in this package in order to avoid circular dependency with the "chain" package.
	ChainsInverseTable = "chains"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldChatID,
	FieldType,
	FieldUserID,
	FieldUserName,
	FieldChatName,
	FieldIsGroup,
}

var (
	// ChainsPrimaryKey and ChainsColumn2 are the table columns denoting the
	// primary key for the chains relation (M2M).
	ChainsPrimaryKey = []string{"user_id", "chain_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID int64
	// DefaultUserName holds the default value on creation for the "user_name" field.
	DefaultUserName string
	// DefaultChatName holds the default value on creation for the "chat_name" field.
	DefaultChatName string
	// DefaultIsGroup holds the default value on creation for the "is_group" field.
	DefaultIsGroup bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeTelegram Type = "telegram"
	TypeDiscord  Type = "discord"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTelegram, TypeDiscord:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}
