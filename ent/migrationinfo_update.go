// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-gov/ent/migrationinfo"
	"github.com/shifty11/cosmos-gov/ent/predicate"
)

// MigrationInfoUpdate is the builder for updating MigrationInfo entities.
type MigrationInfoUpdate struct {
	config
	hooks    []Hook
	mutation *MigrationInfoMutation
}

// Where appends a list predicates to the MigrationInfoUpdate builder.
func (miu *MigrationInfoUpdate) Where(ps ...predicate.MigrationInfo) *MigrationInfoUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetUpdateTime sets the "update_time" field.
func (miu *MigrationInfoUpdate) SetUpdateTime(t time.Time) *MigrationInfoUpdate {
	miu.mutation.SetUpdateTime(t)
	return miu
}

// SetIsMigrated sets the "is_migrated" field.
func (miu *MigrationInfoUpdate) SetIsMigrated(b bool) *MigrationInfoUpdate {
	miu.mutation.SetIsMigrated(b)
	return miu
}

// SetNillableIsMigrated sets the "is_migrated" field if the given value is not nil.
func (miu *MigrationInfoUpdate) SetNillableIsMigrated(b *bool) *MigrationInfoUpdate {
	if b != nil {
		miu.SetIsMigrated(*b)
	}
	return miu
}

// Mutation returns the MigrationInfoMutation object of the builder.
func (miu *MigrationInfoUpdate) Mutation() *MigrationInfoMutation {
	return miu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MigrationInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	miu.defaults()
	if len(miu.hooks) == 0 {
		affected, err = miu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MigrationInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			miu.mutation = mutation
			affected, err = miu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(miu.hooks) - 1; i >= 0; i-- {
			if miu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = miu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, miu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MigrationInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MigrationInfoUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MigrationInfoUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miu *MigrationInfoUpdate) defaults() {
	if _, ok := miu.mutation.UpdateTime(); !ok {
		v := migrationinfo.UpdateDefaultUpdateTime()
		miu.mutation.SetUpdateTime(v)
	}
}

func (miu *MigrationInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   migrationinfo.Table,
			Columns: migrationinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: migrationinfo.FieldID,
			},
		},
	}
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: migrationinfo.FieldUpdateTime,
		})
	}
	if value, ok := miu.mutation.IsMigrated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: migrationinfo.FieldIsMigrated,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migrationinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MigrationInfoUpdateOne is the builder for updating a single MigrationInfo entity.
type MigrationInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MigrationInfoMutation
}

// SetUpdateTime sets the "update_time" field.
func (miuo *MigrationInfoUpdateOne) SetUpdateTime(t time.Time) *MigrationInfoUpdateOne {
	miuo.mutation.SetUpdateTime(t)
	return miuo
}

// SetIsMigrated sets the "is_migrated" field.
func (miuo *MigrationInfoUpdateOne) SetIsMigrated(b bool) *MigrationInfoUpdateOne {
	miuo.mutation.SetIsMigrated(b)
	return miuo
}

// SetNillableIsMigrated sets the "is_migrated" field if the given value is not nil.
func (miuo *MigrationInfoUpdateOne) SetNillableIsMigrated(b *bool) *MigrationInfoUpdateOne {
	if b != nil {
		miuo.SetIsMigrated(*b)
	}
	return miuo
}

// Mutation returns the MigrationInfoMutation object of the builder.
func (miuo *MigrationInfoUpdateOne) Mutation() *MigrationInfoMutation {
	return miuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MigrationInfoUpdateOne) Select(field string, fields ...string) *MigrationInfoUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MigrationInfo entity.
func (miuo *MigrationInfoUpdateOne) Save(ctx context.Context) (*MigrationInfo, error) {
	var (
		err  error
		node *MigrationInfo
	)
	miuo.defaults()
	if len(miuo.hooks) == 0 {
		node, err = miuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MigrationInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			miuo.mutation = mutation
			node, err = miuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(miuo.hooks) - 1; i >= 0; i-- {
			if miuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = miuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, miuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MigrationInfoUpdateOne) SaveX(ctx context.Context) *MigrationInfo {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MigrationInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MigrationInfoUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miuo *MigrationInfoUpdateOne) defaults() {
	if _, ok := miuo.mutation.UpdateTime(); !ok {
		v := migrationinfo.UpdateDefaultUpdateTime()
		miuo.mutation.SetUpdateTime(v)
	}
}

func (miuo *MigrationInfoUpdateOne) sqlSave(ctx context.Context) (_node *MigrationInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   migrationinfo.Table,
			Columns: migrationinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: migrationinfo.FieldID,
			},
		},
	}
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MigrationInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, migrationinfo.FieldID)
		for _, f := range fields {
			if !migrationinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != migrationinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: migrationinfo.FieldUpdateTime,
		})
	}
	if value, ok := miuo.mutation.IsMigrated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: migrationinfo.FieldIsMigrated,
		})
	}
	_node = &MigrationInfo{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migrationinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
