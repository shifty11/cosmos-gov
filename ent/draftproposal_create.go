// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/draftproposal"
)

// DraftProposalCreate is the builder for creating a DraftProposal entity.
type DraftProposalCreate struct {
	config
	mutation *DraftProposalMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dpc *DraftProposalCreate) SetCreateTime(t time.Time) *DraftProposalCreate {
	dpc.mutation.SetCreateTime(t)
	return dpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dpc *DraftProposalCreate) SetNillableCreateTime(t *time.Time) *DraftProposalCreate {
	if t != nil {
		dpc.SetCreateTime(*t)
	}
	return dpc
}

// SetUpdateTime sets the "update_time" field.
func (dpc *DraftProposalCreate) SetUpdateTime(t time.Time) *DraftProposalCreate {
	dpc.mutation.SetUpdateTime(t)
	return dpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dpc *DraftProposalCreate) SetNillableUpdateTime(t *time.Time) *DraftProposalCreate {
	if t != nil {
		dpc.SetUpdateTime(*t)
	}
	return dpc
}

// SetDraftProposalID sets the "draft_proposal_id" field.
func (dpc *DraftProposalCreate) SetDraftProposalID(i int64) *DraftProposalCreate {
	dpc.mutation.SetDraftProposalID(i)
	return dpc
}

// SetTitle sets the "title" field.
func (dpc *DraftProposalCreate) SetTitle(s string) *DraftProposalCreate {
	dpc.mutation.SetTitle(s)
	return dpc
}

// SetURL sets the "url" field.
func (dpc *DraftProposalCreate) SetURL(s string) *DraftProposalCreate {
	dpc.mutation.SetURL(s)
	return dpc
}

// SetChainID sets the "chain" edge to the Chain entity by ID.
func (dpc *DraftProposalCreate) SetChainID(id int) *DraftProposalCreate {
	dpc.mutation.SetChainID(id)
	return dpc
}

// SetNillableChainID sets the "chain" edge to the Chain entity by ID if the given value is not nil.
func (dpc *DraftProposalCreate) SetNillableChainID(id *int) *DraftProposalCreate {
	if id != nil {
		dpc = dpc.SetChainID(*id)
	}
	return dpc
}

// SetChain sets the "chain" edge to the Chain entity.
func (dpc *DraftProposalCreate) SetChain(c *Chain) *DraftProposalCreate {
	return dpc.SetChainID(c.ID)
}

// Mutation returns the DraftProposalMutation object of the builder.
func (dpc *DraftProposalCreate) Mutation() *DraftProposalMutation {
	return dpc.mutation
}

// Save creates the DraftProposal in the database.
func (dpc *DraftProposalCreate) Save(ctx context.Context) (*DraftProposal, error) {
	var (
		err  error
		node *DraftProposal
	)
	dpc.defaults()
	if len(dpc.hooks) == 0 {
		if err = dpc.check(); err != nil {
			return nil, err
		}
		node, err = dpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DraftProposalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpc.check(); err != nil {
				return nil, err
			}
			dpc.mutation = mutation
			if node, err = dpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dpc.hooks) - 1; i >= 0; i-- {
			if dpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DraftProposalCreate) SaveX(ctx context.Context) *DraftProposal {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DraftProposalCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DraftProposalCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DraftProposalCreate) defaults() {
	if _, ok := dpc.mutation.CreateTime(); !ok {
		v := draftproposal.DefaultCreateTime()
		dpc.mutation.SetCreateTime(v)
	}
	if _, ok := dpc.mutation.UpdateTime(); !ok {
		v := draftproposal.DefaultUpdateTime()
		dpc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DraftProposalCreate) check() error {
	if _, ok := dpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "DraftProposal.create_time"`)}
	}
	if _, ok := dpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "DraftProposal.update_time"`)}
	}
	if _, ok := dpc.mutation.DraftProposalID(); !ok {
		return &ValidationError{Name: "draft_proposal_id", err: errors.New(`ent: missing required field "DraftProposal.draft_proposal_id"`)}
	}
	if _, ok := dpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "DraftProposal.title"`)}
	}
	if _, ok := dpc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "DraftProposal.url"`)}
	}
	return nil
}

func (dpc *DraftProposalCreate) sqlSave(ctx context.Context) (*DraftProposal, error) {
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dpc *DraftProposalCreate) createSpec() (*DraftProposal, *sqlgraph.CreateSpec) {
	var (
		_node = &DraftProposal{config: dpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: draftproposal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: draftproposal.FieldID,
			},
		}
	)
	if value, ok := dpc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draftproposal.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := dpc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draftproposal.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := dpc.mutation.DraftProposalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: draftproposal.FieldDraftProposalID,
		})
		_node.DraftProposalID = value
	}
	if value, ok := dpc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draftproposal.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := dpc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draftproposal.FieldURL,
		})
		_node.URL = value
	}
	if nodes := dpc.mutation.ChainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   draftproposal.ChainTable,
			Columns: []string{draftproposal.ChainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chain_draft_proposals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DraftProposalCreateBulk is the builder for creating many DraftProposal entities in bulk.
type DraftProposalCreateBulk struct {
	config
	builders []*DraftProposalCreate
}

// Save creates the DraftProposal entities in the database.
func (dpcb *DraftProposalCreateBulk) Save(ctx context.Context) ([]*DraftProposal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DraftProposal, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DraftProposalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DraftProposalCreateBulk) SaveX(ctx context.Context) []*DraftProposal {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DraftProposalCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DraftProposalCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
