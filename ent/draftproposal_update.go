// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-gov/ent/chain"
	"github.com/shifty11/cosmos-gov/ent/draftproposal"
	"github.com/shifty11/cosmos-gov/ent/predicate"
)

// DraftProposalUpdate is the builder for updating DraftProposal entities.
type DraftProposalUpdate struct {
	config
	hooks    []Hook
	mutation *DraftProposalMutation
}

// Where appends a list predicates to the DraftProposalUpdate builder.
func (dpu *DraftProposalUpdate) Where(ps ...predicate.DraftProposal) *DraftProposalUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetUpdateTime sets the "update_time" field.
func (dpu *DraftProposalUpdate) SetUpdateTime(t time.Time) *DraftProposalUpdate {
	dpu.mutation.SetUpdateTime(t)
	return dpu
}

// SetDraftProposalID sets the "draft_proposal_id" field.
func (dpu *DraftProposalUpdate) SetDraftProposalID(i int64) *DraftProposalUpdate {
	dpu.mutation.ResetDraftProposalID()
	dpu.mutation.SetDraftProposalID(i)
	return dpu
}

// AddDraftProposalID adds i to the "draft_proposal_id" field.
func (dpu *DraftProposalUpdate) AddDraftProposalID(i int64) *DraftProposalUpdate {
	dpu.mutation.AddDraftProposalID(i)
	return dpu
}

// SetTitle sets the "title" field.
func (dpu *DraftProposalUpdate) SetTitle(s string) *DraftProposalUpdate {
	dpu.mutation.SetTitle(s)
	return dpu
}

// SetURL sets the "url" field.
func (dpu *DraftProposalUpdate) SetURL(s string) *DraftProposalUpdate {
	dpu.mutation.SetURL(s)
	return dpu
}

// SetChainID sets the "chain" edge to the Chain entity by ID.
func (dpu *DraftProposalUpdate) SetChainID(id int) *DraftProposalUpdate {
	dpu.mutation.SetChainID(id)
	return dpu
}

// SetNillableChainID sets the "chain" edge to the Chain entity by ID if the given value is not nil.
func (dpu *DraftProposalUpdate) SetNillableChainID(id *int) *DraftProposalUpdate {
	if id != nil {
		dpu = dpu.SetChainID(*id)
	}
	return dpu
}

// SetChain sets the "chain" edge to the Chain entity.
func (dpu *DraftProposalUpdate) SetChain(c *Chain) *DraftProposalUpdate {
	return dpu.SetChainID(c.ID)
}

// Mutation returns the DraftProposalMutation object of the builder.
func (dpu *DraftProposalUpdate) Mutation() *DraftProposalMutation {
	return dpu.mutation
}

// ClearChain clears the "chain" edge to the Chain entity.
func (dpu *DraftProposalUpdate) ClearChain() *DraftProposalUpdate {
	dpu.mutation.ClearChain()
	return dpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DraftProposalUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	dpu.defaults()
	if len(dpu.hooks) == 0 {
		affected, err = dpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DraftProposalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dpu.mutation = mutation
			affected, err = dpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpu.hooks) - 1; i >= 0; i-- {
			if dpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DraftProposalUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DraftProposalUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DraftProposalUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpu *DraftProposalUpdate) defaults() {
	if _, ok := dpu.mutation.UpdateTime(); !ok {
		v := draftproposal.UpdateDefaultUpdateTime()
		dpu.mutation.SetUpdateTime(v)
	}
}

func (dpu *DraftProposalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   draftproposal.Table,
			Columns: draftproposal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: draftproposal.FieldID,
			},
		},
	}
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draftproposal.FieldUpdateTime,
		})
	}
	if value, ok := dpu.mutation.DraftProposalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: draftproposal.FieldDraftProposalID,
		})
	}
	if value, ok := dpu.mutation.AddedDraftProposalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: draftproposal.FieldDraftProposalID,
		})
	}
	if value, ok := dpu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draftproposal.FieldTitle,
		})
	}
	if value, ok := dpu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draftproposal.FieldURL,
		})
	}
	if dpu.mutation.ChainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   draftproposal.ChainTable,
			Columns: []string{draftproposal.ChainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ChainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   draftproposal.ChainTable,
			Columns: []string{draftproposal.ChainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{draftproposal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DraftProposalUpdateOne is the builder for updating a single DraftProposal entity.
type DraftProposalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DraftProposalMutation
}

// SetUpdateTime sets the "update_time" field.
func (dpuo *DraftProposalUpdateOne) SetUpdateTime(t time.Time) *DraftProposalUpdateOne {
	dpuo.mutation.SetUpdateTime(t)
	return dpuo
}

// SetDraftProposalID sets the "draft_proposal_id" field.
func (dpuo *DraftProposalUpdateOne) SetDraftProposalID(i int64) *DraftProposalUpdateOne {
	dpuo.mutation.ResetDraftProposalID()
	dpuo.mutation.SetDraftProposalID(i)
	return dpuo
}

// AddDraftProposalID adds i to the "draft_proposal_id" field.
func (dpuo *DraftProposalUpdateOne) AddDraftProposalID(i int64) *DraftProposalUpdateOne {
	dpuo.mutation.AddDraftProposalID(i)
	return dpuo
}

// SetTitle sets the "title" field.
func (dpuo *DraftProposalUpdateOne) SetTitle(s string) *DraftProposalUpdateOne {
	dpuo.mutation.SetTitle(s)
	return dpuo
}

// SetURL sets the "url" field.
func (dpuo *DraftProposalUpdateOne) SetURL(s string) *DraftProposalUpdateOne {
	dpuo.mutation.SetURL(s)
	return dpuo
}

// SetChainID sets the "chain" edge to the Chain entity by ID.
func (dpuo *DraftProposalUpdateOne) SetChainID(id int) *DraftProposalUpdateOne {
	dpuo.mutation.SetChainID(id)
	return dpuo
}

// SetNillableChainID sets the "chain" edge to the Chain entity by ID if the given value is not nil.
func (dpuo *DraftProposalUpdateOne) SetNillableChainID(id *int) *DraftProposalUpdateOne {
	if id != nil {
		dpuo = dpuo.SetChainID(*id)
	}
	return dpuo
}

// SetChain sets the "chain" edge to the Chain entity.
func (dpuo *DraftProposalUpdateOne) SetChain(c *Chain) *DraftProposalUpdateOne {
	return dpuo.SetChainID(c.ID)
}

// Mutation returns the DraftProposalMutation object of the builder.
func (dpuo *DraftProposalUpdateOne) Mutation() *DraftProposalMutation {
	return dpuo.mutation
}

// ClearChain clears the "chain" edge to the Chain entity.
func (dpuo *DraftProposalUpdateOne) ClearChain() *DraftProposalUpdateOne {
	dpuo.mutation.ClearChain()
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DraftProposalUpdateOne) Select(field string, fields ...string) *DraftProposalUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DraftProposal entity.
func (dpuo *DraftProposalUpdateOne) Save(ctx context.Context) (*DraftProposal, error) {
	var (
		err  error
		node *DraftProposal
	)
	dpuo.defaults()
	if len(dpuo.hooks) == 0 {
		node, err = dpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DraftProposalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dpuo.mutation = mutation
			node, err = dpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpuo.hooks) - 1; i >= 0; i-- {
			if dpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DraftProposalUpdateOne) SaveX(ctx context.Context) *DraftProposal {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DraftProposalUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DraftProposalUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpuo *DraftProposalUpdateOne) defaults() {
	if _, ok := dpuo.mutation.UpdateTime(); !ok {
		v := draftproposal.UpdateDefaultUpdateTime()
		dpuo.mutation.SetUpdateTime(v)
	}
}

func (dpuo *DraftProposalUpdateOne) sqlSave(ctx context.Context) (_node *DraftProposal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   draftproposal.Table,
			Columns: draftproposal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: draftproposal.FieldID,
			},
		},
	}
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DraftProposal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, draftproposal.FieldID)
		for _, f := range fields {
			if !draftproposal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != draftproposal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draftproposal.FieldUpdateTime,
		})
	}
	if value, ok := dpuo.mutation.DraftProposalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: draftproposal.FieldDraftProposalID,
		})
	}
	if value, ok := dpuo.mutation.AddedDraftProposalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: draftproposal.FieldDraftProposalID,
		})
	}
	if value, ok := dpuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draftproposal.FieldTitle,
		})
	}
	if value, ok := dpuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draftproposal.FieldURL,
		})
	}
	if dpuo.mutation.ChainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   draftproposal.ChainTable,
			Columns: []string{draftproposal.ChainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ChainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   draftproposal.ChainTable,
			Columns: []string{draftproposal.ChainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DraftProposal{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{draftproposal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
