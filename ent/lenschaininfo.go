// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/cosmos-gov/ent/lenschaininfo"
)

// LensChainInfo is the model entity for the LensChainInfo schema.
type LensChainInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CntErrors holds the value of the "cnt_errors" field.
	CntErrors int `json:"cnt_errors,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LensChainInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lenschaininfo.FieldID, lenschaininfo.FieldCntErrors:
			values[i] = new(sql.NullInt64)
		case lenschaininfo.FieldName:
			values[i] = new(sql.NullString)
		case lenschaininfo.FieldCreateTime, lenschaininfo.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LensChainInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LensChainInfo fields.
func (lci *LensChainInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lenschaininfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lci.ID = int(value.Int64)
		case lenschaininfo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				lci.CreateTime = value.Time
			}
		case lenschaininfo.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				lci.UpdateTime = value.Time
			}
		case lenschaininfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lci.Name = value.String
			}
		case lenschaininfo.FieldCntErrors:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cnt_errors", values[i])
			} else if value.Valid {
				lci.CntErrors = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LensChainInfo.
// Note that you need to call LensChainInfo.Unwrap() before calling this method if this LensChainInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (lci *LensChainInfo) Update() *LensChainInfoUpdateOne {
	return (&LensChainInfoClient{config: lci.config}).UpdateOne(lci)
}

// Unwrap unwraps the LensChainInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lci *LensChainInfo) Unwrap() *LensChainInfo {
	tx, ok := lci.config.driver.(*txDriver)
	if !ok {
		panic("ent: LensChainInfo is not a transactional entity")
	}
	lci.config.driver = tx.drv
	return lci
}

// String implements the fmt.Stringer.
func (lci *LensChainInfo) String() string {
	var builder strings.Builder
	builder.WriteString("LensChainInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", lci.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(lci.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(lci.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(lci.Name)
	builder.WriteString(", cnt_errors=")
	builder.WriteString(fmt.Sprintf("%v", lci.CntErrors))
	builder.WriteByte(')')
	return builder.String()
}

// LensChainInfos is a parsable slice of LensChainInfo.
type LensChainInfos []*LensChainInfo

func (lci LensChainInfos) config(cfg config) {
	for _i := range lci {
		lci[_i].config = cfg
	}
}
