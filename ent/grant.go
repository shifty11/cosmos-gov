// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/cosmos-gov/ent/grant"
	"github.com/shifty11/cosmos-gov/ent/wallet"
)

// Grant is the model entity for the Grant schema.
type Grant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Grantee holds the value of the "grantee" field.
	Grantee string `json:"grantee,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GrantQuery when eager-loading is set.
	Edges         GrantEdges `json:"edges"`
	wallet_grants *int
}

// GrantEdges holds the relations/edges for other nodes in the graph.
type GrantEdges struct {
	// Granter holds the value of the granter edge.
	Granter *Wallet `json:"granter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GranterOrErr returns the Granter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantEdges) GranterOrErr() (*Wallet, error) {
	if e.loadedTypes[0] {
		if e.Granter == nil {
			// The edge granter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: wallet.Label}
		}
		return e.Granter, nil
	}
	return nil, &NotLoadedError{edge: "granter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Grant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case grant.FieldID:
			values[i] = new(sql.NullInt64)
		case grant.FieldGrantee, grant.FieldType:
			values[i] = new(sql.NullString)
		case grant.FieldCreateTime, grant.FieldUpdateTime, grant.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case grant.ForeignKeys[0]: // wallet_grants
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Grant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Grant fields.
func (gr *Grant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case grant.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				gr.CreateTime = value.Time
			}
		case grant.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				gr.UpdateTime = value.Time
			}
		case grant.FieldGrantee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grantee", values[i])
			} else if value.Valid {
				gr.Grantee = value.String
			}
		case grant.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gr.Type = value.String
			}
		case grant.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				gr.ExpiresAt = value.Time
			}
		case grant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field wallet_grants", value)
			} else if value.Valid {
				gr.wallet_grants = new(int)
				*gr.wallet_grants = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGranter queries the "granter" edge of the Grant entity.
func (gr *Grant) QueryGranter() *WalletQuery {
	return (&GrantClient{config: gr.config}).QueryGranter(gr)
}

// Update returns a builder for updating this Grant.
// Note that you need to call Grant.Unwrap() before calling this method if this Grant
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Grant) Update() *GrantUpdateOne {
	return (&GrantClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the Grant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Grant) Unwrap() *Grant {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Grant is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Grant) String() string {
	var builder strings.Builder
	builder.WriteString("Grant(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(gr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(gr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", grantee=")
	builder.WriteString(gr.Grantee)
	builder.WriteString(", type=")
	builder.WriteString(gr.Type)
	builder.WriteString(", expires_at=")
	builder.WriteString(gr.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Grants is a parsable slice of Grant.
type Grants []*Grant

func (gr Grants) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
